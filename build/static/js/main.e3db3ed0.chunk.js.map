{"version":3,"sources":["WidgetsContext.js","Sidebar.js","Inputs.js","FormPreview.js","DatasourcePreview.js","PreviewForm.js","FormWidget.js","DataSourceWidget.js","ReactFlow.js","App.js","reportWebVitals.js","index.js"],"names":["WidgetsContext","createContext","WidgetsProvider","props","createData","state","payload","console","log","currentNode","addNewItem","removeData","newState","Object","keys","reduce","obj","key","field","React","useReducer","action","type","globalState","dispatch","Provider","value","children","Sidebar","onDragStart","event","nodeType","dataTransfer","setData","effectAllowed","className","draggable","inputField","placeholder","onChange","evt","TextField","CheckboxField","data","onHandleCheckbox","onHandleChange","target","map","elem","span","title","VALIDATE_FORM_MESSAGES_TEMPLATE","required","types","email","number","url","range","string","max","whitespace","FormPreview","layoutType","fields","useContext","getFieldsList","forEach","push","formItemLayout","labelCol","wrapperCol","buttonItemLayout","offset","inputs","inputPlaceholder","rules","name","layout","initialValues","remember","onFinish","values","onFinishFailed","errorInfo","validateMessages","Item","label","inputLabel","length","htmlType","DatasourcePreview","useState","visible","setVisible","columns","setColumns","dataSource","setDataSource","isLoading","setIsLoading","useForm","handleSubmit","control","reset","getApiUrl","slug_input","getData","apiUrl","pickFields","fetch","then","response","json","result","tableColumns","dataIndex","catch","e","onClick","style","margin","centered","onOk","onCancel","width","padding","onSubmit","as","color","background","borderColor","border","loading","Option","Select","PreviewForm","previewLayout","setPreviewLayout","d","FormWidget","newNode","onHandleNode","onHandleDrawer","register","errors","displayFields","setDisplayFields","formWidgetKey","ref","previousDisplayFields","icon","PlusOutlined","header","bordered","renderItem","item","index","actions","inputValue","inputName","editField","deleteField","active","Meta","memo","DataSourceWidget","setPickFields","formName","formFields","setFormFields","defaultValues","widgetType","isSelected","dataSourceData","indexOf","filteredItems","filter","id","ReactFlowChart","setNewNode","setWidgetType","visibleDrawer","setVisibleDrawer","reactFlowWrapper","useRef","reactFlowInstance","setReactFlowInstance","elements","setElements","useEffect","els","el","updateNode","updatedNode","widgets","previousVisible","onConnect","params","addEdge","onElementsRemove","elementsToRemove","removeElements","onElementClick","element","split","preventDefault","onLoad","_reactFlowInstance","onDrop","reactFlowBounds","current","getBoundingClientRect","position","project","x","clientX","left","y","clientY","top","test","formType","es","concat","onDragOver","dropEffect","placement","closable","onClose","App","ReactFlow","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e3db3ed0.chunk.js","sourcesContent":["import React, {createContext} from 'react';\nexport const WidgetsContext = createContext();\n\nexport const WidgetsProvider = props => {\n    const initialState = {}\n\nconst reducer = (state, action) => {\n    const { payload } = action;\n    switch (action.type) {\n      case \"CREATE_OBJECT\":\n       return addNewItem(state, payload);\n      case \"CREATE_DATA\": \n      return createData(state, payload);\n      case \"REMOVE_DATA\":\n      return removeData(state, payload);    \n      default:\n       return state;    \n  }};\n\n  const createData = (state, payload) => {\n      console.log(payload);\n    return {...state, [state.currentNode]: {...state[state.currentNode],  ...payload}};\n  }\n\n  const addNewItem = (state, payload) => {\n      debugger;\n    //   return {...state, [payload]: {}, currentNode: payload };\n      if(!state[payload]){\n        return {...state, [payload]: {}, currentNode: payload };\n      }\n      return {...state, currentNode: payload };\n    \n  }\n\n  const removeData = (state, payload) => {\n     console.log(payload); \n    //  delete state[payload.currentNode][payload.field]; \n    const newState = Object.keys(state[payload.currentNode]).reduce((obj, key)=>{\n        if(key !== payload.field){\n         obj[key] = state[payload.currentNode][key] \n        }\n      return obj\n     },{})\n     return {...state, [state.currentNode]: {...newState}};\n  }\n  \n\n        const [globalState, dispatch] = React.useReducer(reducer, initialState);\n        \n    return(\n        <WidgetsContext.Provider value={[globalState, dispatch]}>\n            {props.children}\n        </WidgetsContext.Provider>\n    )\n}","import React from 'react';\n\nconst Sidebar=  () => {\n  const onDragStart = (event, nodeType) => {\n    event.dataTransfer.setData('application/reactflow', nodeType);\n    event.dataTransfer.effectAllowed = 'move';\n  };\n\n  return (\n    <aside>\n      <div className=\"description\">You can drag these nodes to the pane on the right.</div>\n      <div className=\"dndnode form\" onDragStart={(event) => onDragStart(event, 'form')} draggable>\n        Form Widget\n      </div>\n      <div className=\"dndnode dataSource\" onDragStart={(event) => onDragStart(event, 'dataSource')} draggable>\n        DataSource\n      </div>\n       {/* <div className=\"dndnode output\" onDragStart={(event) => onDragStart(event, 'output')} draggable>\n        Output Node\n      </div> */}\n    </aside>\n  );\n};\n\nexport default Sidebar;","import React from \"react\";\nimport { Input, Checkbox, Row, Col } from \"antd\";\n\n\nexport const inputField = (placeholder, onChange ) => {\n    return <Input placeholder={placeholder} onChange={(evt) => onChange()} />;\n};\n\n\nexport const TextField  =  (props) => {\n    return (\n     <Input {...props} />\n    );\n  };\n\n\n\n  export const CheckboxField  =  (props) => {\n     const { data, onHandleCheckbox } = {...props}; \n     \n     const onHandleChange = (evt) => {\n        const { target } = evt; \n        const { value } = target;\n        onHandleCheckbox(value);\n     } \n    return (\n        <div>\n  {data.map((elem) => (\n            <Row>\n                <Col span={8}>\n                 <Checkbox value={elem.title} onChange={onHandleChange}>{elem.title}</Checkbox>\n                </Col>\n            </Row>\n            ))}\n        </div>\n          \n\n\n    );\n  };  ","/* eslint-disable no-template-curly-in-string */\nimport { useContext, useEffect, useState } from 'react';\nimport { TextField } from \"./Inputs\";\nimport { Form, Input, Button, Checkbox } from 'antd';\nimport { WidgetsContext } from './WidgetsContext';\n// const layout = {\n//   labelCol: {\n//     span: 4,\n//   },\n//   wrapperCol: {\n//     span: 16,\n//   },\n// };\n// const tailLayout = {\n//   wrapperCol: {\n//     offset: 4,\n//     span: 16,\n//   },\n// };\n\nconst VALIDATE_FORM_MESSAGES_TEMPLATE = {\n  required: \"${label} is required!\",\n  types: {\n    email: 'Enter a valid email!',\n    number: \"${label} is not a validate number!\",\n    url: \"${label} is not a valid url!\",\n  },\n  number: {\n    range: \"${label} must be between ${min} and ${max}\",\n  },\n  string: {\n    max: \"Character count cannot exceed ${max}\",\n  },\n  whitespace: \"${label} cannot be empty!\",\n};\n  \n\nconst FormPreview = (props) => {\n  \n  const { fields, layoutType } = {...props}; \n  \n  const [globalState, dispatch] = useContext(WidgetsContext); \n  \n  // useEffect(()=>{\n  //   debugger;\n  //   const keys = currentNode && Object.keys(globalState[currentNode]); \n  //   globalState[currentNode] && keys.forEach((elem) => {\n  //     setFormFields([...formFields, globalState[currentNode][elem]]);\n  //   });\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  // },[globalState[currentNode]])\n\n  const getFieldsList = () => {\n    const fields = [];\n    const { currentNode } = globalState;\n    const keys = currentNode && Object.keys(globalState[currentNode]); \n    globalState[currentNode] && keys.forEach((elem) => {fields.push(globalState[currentNode][elem])});\n    return fields; \n  }\n  const formItemLayout =\n    layoutType === 'horizontal'\n      ? {\n          labelCol: { span: 4 },\n          wrapperCol: { span: 14 },\n        }\n      : null;\n\n  const buttonItemLayout =\n  layoutType === 'horizontal'\n      ? {\n          wrapperCol: { span: 14, offset: 4 },\n        }\n      : null; \n  \n  const onFinish = (values) => {\n    console.log('Success:', values);\n  };\n\n  const onFinishFailed = (errorInfo) => {\n    console.log('Failed:', errorInfo);\n  };\n\n    const inputs = {\n    'text':  (elem) => {\n        return <TextField placeholder={elem?.inputPlaceholder || ''} type={elem.type} rules={[]}\n        />\n     },\n     'email':  (elem) => {\n        return <TextField  placeholder={elem?.inputPlaceholder || ''} type={elem.type} rules={[{ type: \"email\" }]}\n        />\n     },\n     'number':  (elem) => {\n      return <TextField placeholder={elem?.inputPlaceholder || ''} type={elem.type} rules={[{ type: \"number\" }]}\n      />\n   }\n    }\n\n  \n  return (\n    <Form\n      {...formItemLayout}\n      name=\"basic\"\n      layout={layoutType}\n      initialValues={{\n        remember: true,\n      }}\n      onFinish={onFinish}\n      onFinishFailed={onFinishFailed}\n      validateMessages={VALIDATE_FORM_MESSAGES_TEMPLATE}\n    >\n\n                {\n                    getFieldsList().map((elem) => (\n                        <>\n                            \n                         \n\n      <Form.Item\n        label={elem.inputLabel}\n        name={elem.name}\n        >\n        {inputs[elem.type](elem)}\n      </Form.Item>\n\n                          \n                            \n                        </>\n                       \n                    ))\n                }\n\n\n      \n\n      \n\n      {getFieldsList().length > 0 && <Form.Item {...buttonItemLayout}>\n        <Button type=\"primary\" htmlType=\"submit\">\n          Submit\n        </Button>\n      </Form.Item> }\n\n      \n\n     \n\n     \n    </Form>\n  );\n};\n\n\nexport default FormPreview;","import { useState, useContext, useEffect  } from 'react';\nimport { WidgetsContext } from './WidgetsContext';\nimport { Modal, Button, Table, Row, Col } from 'antd';\nimport { TextField } from \"./Inputs\";\n\nimport { useForm, Controller } from \"react-hook-form\";\n\n\n\nconst DatasourcePreview =  (props) => {\n    const [globalState] = useContext(WidgetsContext); \n    const { currentNode } = globalState;\n    const [visible, setVisible] = useState(false);\n    const [columns, setColumns] = useState([]);\n    const [dataSource, setDataSource] = useState([]);\n    const [isLoading, setIsLoading] = useState(false);\n   \n   \n    \n    const { handleSubmit, reset, control } = useForm();\n    const getApiUrl = (slug_input, url) => slug_input ? `${url}/${slug_input}` : url; \n    const getDataSource = () => {\n        const {slug_input, url, pickFields} = globalState[currentNode];\n        const apiUrl = getApiUrl(slug_input, url);\n        setIsLoading(true);\n        getData(apiUrl, pickFields);\n      }\n\n    const onSubmit = data => { \n      const {url, pickFields} = globalState[currentNode];\n      const { slug_input } = data;\n      const apiUrl = getApiUrl(slug_input, url);\n      setIsLoading(true);\n      getData(apiUrl, pickFields);\n      // reset();\n  };\n\n  const getData = (apiUrl, pickFields) => {\n    fetch(apiUrl)\n        .then(response => response.json())\n        .then(result => {\n           const tableColumns = pickFields.map((elem) => ({title:elem, dataIndex: elem, key: elem}));\n           setColumns(tableColumns);\n           setDataSource([result]);\n           setVisible(true)\n           setIsLoading(false);\n        })\n        .catch(e => {\n            console.log(e);\n            setVisible(false)\n        });\n  }\n    \n\n   \n   \n \n    \n   \n  return (\n    <div>\n     \n       <Button type=\"primary\" onClick={getDataSource} style={{margin: '10px'}}>\n        Preview Data Source\n      </Button>\n      <Modal\n        title=\"Data Source\"\n        centered\n        visible={visible}\n        onOk={() => setVisible(false)}\n        onCancel={() => setVisible(false)}\n        width={600}\n      >\n         <div style={{padding: \"10px\"}}>\n              \n            <form onSubmit={handleSubmit(onSubmit)}>\n            <Row>\n              <Col span={20}>\n              <Controller\n               as={<TextField placeholder='Enter id.....' />}\n               control={control}\n               rules={{ required: true }}\n               name=\"slug_input\"\n               style={{padding: '10px', margin: '10px'}}\n               />\n              </Col>\n              <Col span={4}>\n                 <input type=\"submit\"  style={{\n                   padding: '10px', \n                   margin: '10px', \n                   color: '#fff',\n                   background: '#1890ff',\n                   borderColor: '#1890ff',\n                   border: '1px solid #1890ff'}}/>\n              </Col>\n            </Row>\n            \n             </form>\n                 \n            </div>\n         { !isLoading && <Table dataSource={dataSource} columns={columns} loading={isLoading}/> }\n       \n      </Modal>\n    </div>\n    \n  );\n};\n\nexport default DatasourcePreview;\n\n","import React, { useState, useContext, useEffect } from 'react';\n\nimport FormPreview from './FormPreview';\nimport DatasourcePreview from './DatasourcePreview';\nimport { WidgetsContext } from './WidgetsContext';\n\nimport { Modal, Button, Row, Col, Select } from 'antd';\nconst { Option } = Select;\n\nconst PreviewForm = (props) => {\n  const [globalState, dispatch] = useContext(WidgetsContext); \n  const [previewLayout, setPreviewLayout] = useState(''); \n  console.log(globalState);\n  const [fields, setFormFields] = useState([]);\n  const [visible, setVisible] = useState(false);\n  const layoutType = [\n    { value: \"vertical\", label: \"Vertical\" },\n    { value: \"horizontal\", label: \"Horizontal\" },\n    { value: \"inline\", label: \"Inline\" },\n  ];\n\n\n\n\n \n\n  const updateFormFields = () => {\n    // const { currentNode } = globalState;\n    // const keys = currentNode && Object.keys(globalState[currentNode]); \n    \n    // globalState[currentNode] && keys.forEach((elem) => {\n    //   fields.push(globalState[currentNode][elem]);\n    //   setFormFields(fields);\n    //   console.log(fields);\n    //     // setFormFields([...fields, globalState[currentNode][elem]]);\n    // });\n    setVisible(true) \n    // dispatch({ type: \"CREATE_LAYOUT\", payload: {layoutType : previewLayout} });\n  }\n\n  const onHandleLayoutChange = (evt) => {\n    setPreviewLayout(evt);\n  }\n  \n\n    \n  return (\n    <>\n\n      <Row>\n      <Col span={8}>\n      <Button type=\"primary\" onClick={updateFormFields} style={{margin: \"10px\"}}>\n        Preview Form\n      </Button>\n      </Col>\n      <Col span={16}>\n        <Row style={{margin:\"10px\"}}>\n          <Col span={8}>\n            <label>Layout Type</label> \n          </Col>\n          <Col span={15}>\n          <Select style={{width: '100%'}} onChange={onHandleLayoutChange} placeholder=\"Choose Layout Type\">\n                {layoutType.map(d => {\n                  return (\n                    <Option key={d.value} value={d.value} >\n                      {d.label}\n                    </Option>\n                  );\n                })}\n        </Select>\n          </Col>\n        </Row>\n       \n     \n      </Col>\n    </Row>\n     \n      <Modal\n        title=\"Form\"\n        centered\n        visible={visible}\n        onOk={() => setVisible(false)}\n        onCancel={() => setVisible(false)}\n        width={1000}\n      >\n         \n         <FormPreview fields={fields} layoutType={previewLayout}/>\n\n       \n      </Modal>\n    </>\n  );\n};\n\nexport default PreviewForm;\n","import React, {useState, useContext, useEffect, memo} from 'react';\n\nimport PreviewForm  from './PreviewForm';\n\nimport { Input, Button, Select, Row, Col, List, Skeleton } from \"antd\";\nimport { PlusOutlined } from '@ant-design/icons';\nimport { useForm, Controller } from \"react-hook-form\";\nimport { WidgetsContext } from './WidgetsContext';\nimport { inputField } from \"./Inputs\";\nconst { Option } = Select;\n\nconst FormWidget =  (props) => {\n  const [globalState, dispatch] = useContext(WidgetsContext);\n  const { currentNode } = globalState;\n  // const [fields, setFormFields] = useState([]);\n  const { newNode, onHandleNode, onHandleDrawer } = {...props};  \n  const { handleSubmit, register, errors, control, reset } = useForm();\n  const [displayFields, setDisplayFields] = useState(true);\n  \n  const onSubmit = data => { \n      \n      const field = Object.keys(globalState[currentNode]).length + 1;\n      const formWidgetKey = {[`field${field}`]: {...data, 'field': `field${field}`}};\n      dispatch({ type: \"CREATE_DATA\", payload: formWidgetKey });\n      reset({});\n  };\n\n  const types = [\n    { value: \"text\", label: \"Text\" },\n    { value: \"email\", label: \"Email\" },\n    { value: \"number\", label: \"Number\" }\n  ];\n  let fields = [];\n  const getFieldsList = () => {\n    \n    const { currentNode } = globalState;\n    const keys = currentNode && Object.keys(globalState[currentNode]); \n    globalState[currentNode] && keys.forEach((elem) => {\n      fields.push(globalState[currentNode][elem])\n    });\n    return fields; \n  }\n \n\n  const editField = (index) => {\n    console.log('Edit');\n    const { type, inputLabel, inputValue, inputPlaceholder, inputName } = fields[index];\n    reset({\n      type, inputLabel, inputValue, inputPlaceholder, inputName\n\n    });\n  }\n\n  \n \n  const deleteField = (index) => {\n    const { currentNode } = globalState;\n    const field = fields[index].field;\n    dispatch({ type: \"REMOVE_DATA\", payload: {field:field, currentNode: currentNode }});\n    getFieldsList(); \n  }\n \n    \n   \n  return (\n    <div>\n      <PreviewForm />\n      <form onSubmit={handleSubmit(onSubmit)}>\n            <div style={{padding: \"10px\"}}>\n              \n              <Input placeholder=\"Form Name\" ref={register} value={newNode?.data?.label} onChange={(evt) => onHandleNode(evt)}/>\n            </div>\n            <Button\n                type=\"dashed\"\n                onClick={() => setDisplayFields(previousDisplayFields => !previousDisplayFields)}\n                style={{ width: '95%', margin: '10px'}}\n                icon={<PlusOutlined />}\n              >\n                Add field\n              </Button>\n            \n            {!displayFields && \n            <div style={{padding: \"10px\"}}>\n            <section>\n              <Row>\n                <Col span={24}>\n                <label>Select Type</label>\n                <Controller\n               \n               as={\n               <Select style={{width: '100%'}} placeholder=\"Choose Field Type\">\n                {types.map(d => {\n                  return (\n                    <Option key={d.value} value={d.value} >\n                      {d.label}\n                    </Option>\n                  );\n                })}\n              </Select>}\n               control={control}\n               rules={{ required: true }}\n               name=\"type\"/>\n                </Col>\n              </Row>\n              \n               {errors.type && (\n\t\t\t\t\t        <span className='error'>This field is required</span>\n\t\t\t\t        )}\n               <Row>\n                <Col span={24}>\n                <label>Input Label</label>\n                <Controller\n               as={inputField(\"Input Label\")}\n               control={control}\n               ref={register({ required: true, value: 'test' })}\n              //  defaultValue=\"inputLabel\"\n               rules={{ required: true }}\n               name=\"inputLabel\"/>\n                </Col>   \n              </Row> \n              <Row>\n                <Col span={24}>\n                <label>Input Placeholder</label>\n                <Controller\n               placeholder=\"Input Placeholder\"\n               as={inputField(\"Input Placeholder\")}\n               ref={register({ required: true })}\n              //  rules={{ required: true }}\n               control={control}\n               name=\"inputPlaceholder\"/>\n                </Col>\n              </Row>\n              {/* <Row>\n                <Col span={24}>\n                <label>Input Name</label>\n                <Controller\n               placeholder=\"Input Name\"\n               as={inputField(\"Input Name\")}\n               ref={register({ required: true })}\n               rules={{ required: true }}\n               control={control}\n               name=\"inputName\"/>\n                </Col>\n              </Row> */}\n              <Row>\n                <Col span={24}>\n                <label>Input Value</label>\n                <Controller\n               placeholder=\"Input Value\"\n               as={inputField(\"Input Value\")}\n               ref={register({ required: true })}\n              //  rules={{ required: true }}\n               control={control}\n               name=\"inputValue\"/>\n                </Col>\n              </Row>\n              \n              \n               \n            </section>\n           \n          </div> }\n          <div style={{padding: \"10px\"}}>\n            <input type=\"submit\" style={{width: '50%'}}/>\n            <Button onClick={onHandleDrawer} style={{width: '50%'}}>Cancel</Button>\n          </div>\n          <List\n          header={<div>Form Fields</div>}\n          bordered\n          dataSource={getFieldsList()}\n          renderItem={(item, index) => (\n        <>\n           <List.Item\n            actions={[<a key=\"list-loadmore-edit\" onClick={() => editField(index)}>edit</a>, <a key=\"list-loadmore-more\" onClick={() => deleteField(index)}>delete</a>]}\n          >\n            <Skeleton loading={item.loading} active>\n            <List.Item.Meta\n               \n                title={<h4>Type: {item.type}</h4>}\n                \n              />\n            </Skeleton>\n          </List.Item>\n        </>\n       \n      )}\n    />\n    </form>\n    </div>\n    \n  );\n};\n\nexport default memo(FormWidget);","import React, {  useState, useContext, memo } from 'react';\nimport { useForm, Controller } from \"react-hook-form\";\nimport { Button, Table, Input, Row, Col } from \"antd\";\nimport { WidgetsContext } from './WidgetsContext';\nimport { inputField, CheckboxField } from \"./Inputs\";\nimport DatasourcePreview from \"./DatasourcePreview\";\n\nconst DataSourceWidget =  (props) => {\n  const [globalState, dispatch] = useContext(WidgetsContext);\n  const { currentNode } = globalState;\n  const { newNode, onHandleNode, onHandleDrawer } = {...props};  \n  const [columns, setColumns] = useState([]);\n  const [pickFields, setPickFields] = useState([]);\n  const [dataSource, setDataSource] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  \n  const formName = 'form_dataSource_1';\n  const [formFields, setFormFields] = useState({[formName]: {}});\n  const { handleSubmit, register, control } = useForm({\n    defaultValues: {\n        slug_input: '',\n        url: 'https://jsonplaceholder.typicode.com/todos'\n    }\n  });\n\n\n  \n  const getApiUrl = (slug_input, url) => slug_input ? `${url}/${slug_input}` : url; \n\n  const onSubmit = data => {\n    setIsLoading(true);\n    setDataSource([]);\n    \n    const { slug_input, url } = data;\n    const apiUrl = getApiUrl(slug_input, url);\n    fetch(apiUrl)\n    .then(response => response.json())\n    .then(result => {\n       setIsLoading(false);\n       const columns = Object.keys(result)\n       const tableColumns = columns.map((elem) => ({title:elem, dataIndex: elem, key: elem, isSelected: false}));\n       \n      \n       const dataSourceData = {...data, columns, style:{}};\n       dispatch({ type: \"CREATE_DATA\", payload: dataSourceData });\n       setFormFields({...formFields, [formName]: dataSourceData})\n       setColumns(tableColumns);\n       setDataSource([result]);\n       \n    })\n    .catch(e => {\n        console.log(e);\n        setIsLoading(false);\n    });\n  }\n\n  const onHandleCheckbox = (value) => {\n    // let filteredItems;\n    let dataSource;\n    const pickFieldIndex = pickFields.indexOf(value);\n    if(pickFieldIndex === -1){\n      setPickFields([...pickFields, value]);\n      dataSource = {pickFields: [...pickFields, value] };\n     \n    }\n    else{\n      const filteredItems = pickFields.filter(function(item) {\n        return item !== value\n      })\n      setPickFields(filteredItems);\n      dataSource = {pickFields: filteredItems};\n    }\n    dispatch({ type: \"CREATE_DATA\", payload: {pickFields :dataSource.pickFields} });\n    \n   \n  \n     \n  }\n\n  return (\n      <div>\n         <DatasourcePreview widgetType='datasource' />\n         <Input style={{padding: '10px', margin: '10px'}} placeholder=\"Form Name\" ref={register} value={newNode?.data?.label} onChange={(evt) => onHandleNode(evt)}/> \n        <form onSubmit={handleSubmit(onSubmit)}>\n        <div>\n            <section>\n              <label>Data Source</label>\n              <Controller\n               as={inputField(\"slug_input\")}\n               control={control}\n               rules={{ required: true }}\n               name=\"slug_input\"\n               style={{padding: '10px', margin: '10px'}}\n               />\n               <Controller\n               as={inputField(\"Url\")}\n               control={control}\n               rules={{ required: true }}\n               name=\"url\"\n               style={{padding: '10px', margin: '10px'}}\n               />\n            </section>\n        </div> \n          <div style={{padding: '10px', margin: '10px'}}>\n            <input type=\"submit\" style={{width: '50%'}}/>\n            <Button onClick={onHandleDrawer} style={{width: '50%'}}>Cancel</Button>\n          </div>\n\n          </form>\n          {/* { !isLoading && <Table dataSource={dataSource} columns={columns} /> } */}\n\n          <Row>\n            <Col>\n              <h4>Pick Fields</h4>\n              <CheckboxField data={columns} onHandleCheckbox={onHandleCheckbox}/>\n            </Col>\n           \n            {/* {dataSource.length > 0 && formFields[formName]} */}\n          </Row>\n         \n          \n        \n      </div>\n    \n\n\n  \n  \n  );\n};\n\nexport default memo(DataSourceWidget);","import React, { useState, useRef, useEffect, useContext } from 'react';\nimport ReactFlow, {\n  ReactFlowProvider,\n  addEdge,\n  removeElements,\n  Controls,\n} from 'react-flow-renderer';\nimport { WidgetsContext } from './WidgetsContext';\n\n\n\nimport Sidebar from './Sidebar';\nimport FormWidget from './FormWidget';\nimport DataSourceWidget from './DataSourceWidget';\n\nimport { Drawer } from \"antd\";\nimport './dnd.css';\n\n\n\nlet id = 0;\nconst getId = () => `dndnode_${id++}`;\n\nconst ReactFlowChart = () => {\n  const [globalState, dispatch] = useContext(WidgetsContext);\n  const [newNode, setNewNode] = useState({});\n  const [widgetType, setWidgetType] = useState('Form');\n  const [visibleDrawer, setVisibleDrawer] = useState(false);\n  const reactFlowWrapper = useRef(null);\n  const [reactFlowInstance, setReactFlowInstance] = useState(null);\n  const [elements, setElements] = useState([]);\n  const onConnect = (params) => setElements((els) => addEdge(params, els));\n  useEffect(() => {\n    setElements((els) =>\n      els.map((el) => {\n        if (el.id === newNode.id) {\n         el.data = {\n            ...el.data,\n            label: newNode.data.label,\n          };\n        }\n      return el;\n      })\n    );\n  }, [newNode, setElements]);\n  const onElementsRemove = (elementsToRemove) =>\n    setElements((els) => removeElements(elementsToRemove, els));\n  const onLoad = (_reactFlowInstance) =>\n    setReactFlowInstance(_reactFlowInstance);\n  const onDragOver = (event) => {\n    event.preventDefault();\n    event.dataTransfer.dropEffect = 'move';\n  };\n\n  const onDrop = (event) => {\n    event.preventDefault();\n    const reactFlowBounds = reactFlowWrapper.current.getBoundingClientRect();\n    const type = event.dataTransfer.getData('application/reactflow');\n  \n    const position = reactFlowInstance.project({\n      x: event.clientX - reactFlowBounds.left,\n      y: event.clientY - reactFlowBounds.top,\n    });\n    const newNode = {\n      id: getId(),\n      type: 'default',\n      test: 'asd',\n      position,\n      data: { label: `${type} Widget` },\n      style: {\n        background: '#D6D5E6',\n        color: '#333',\n        border: '1px solid #222138',\n        width: 180,\n        padding: 10\n      },\n      formType: type\n    };\n    setElements((es) => es.concat(newNode));\n    setNewNode(() => newNode );\n    setWidgetType(() => type);\n  };\n\n  const onElementClick = (event, element) => {\n    if(element?.data){\n      const widgetType = element.data.label.split(\" \")[0];\n      event.preventDefault();\n      setNewNode(() => element);\n      setVisibleDrawer(previousVisible => !previousVisible);\n      setWidgetType(() => widgetType);\n      console.log();\n      dispatch({\n        type: \"CREATE_OBJECT\",\n        payload: element.id,\n        \n      });\n    }\n}\n\n  const onClose = () => {\n    setVisibleDrawer(previousVisible => !previousVisible);\n  };\n  \n\n  const updateNode = evt => {\n    const { target } = evt;\n    const { value } = target;\n    const updatedNode = {...newNode, data: {label: value}};\n    setNewNode(() => updatedNode);\n  }\n\n  const widgets = {\n    'form': <FormWidget \n    newNode={newNode}\n    onHandleNode={updateNode}\n    onHandleDrawer={() => setVisibleDrawer(previousVisible => !previousVisible)}\n  />,\n  'dataSource': <DataSourceWidget\n    newNode={newNode}\n    onHandleNode={updateNode}\n    onHandleDrawer={() => setVisibleDrawer(previousVisible => !previousVisible)}/>\n  }\n\n\n  return (\n    \n    <div className=\"dndflow\">\n      <Sidebar />\n      \n      <ReactFlowProvider>\n        <div className=\"reactflow-wrapper\" ref={reactFlowWrapper}>\n          <ReactFlow\n            elements={elements}\n            onConnect={onConnect}\n            onElementsRemove={onElementsRemove}\n            onElementClick={onElementClick}\n            onLoad={onLoad}\n            onDrop={onDrop}\n            onDragOver={onDragOver}\n            style={{position: 'absolute', width:'80%'}}\n          >\n            <Controls />\n          </ReactFlow>\n        </div>\n        \n      </ReactFlowProvider>\n\n      <Drawer\n          title={`${widgetType} Widget`}\n          placement='right'\n          width={500}\n          closable={false}\n          onClose={onClose}\n          visible={visibleDrawer}\n          key={'right'}\n        >\n         \n          {widgets[widgetType]}\n        \n        </Drawer>\n     \n    </div>\n   \n   \n  );\n};\n\nexport default ReactFlowChart;","import React from 'react';\nimport { WidgetsProvider } from './WidgetsContext';\nimport  ReactFlowChart from './ReactFlow';\nimport \"antd/dist/antd.css\";\nimport './dnd.css';\n\n\n\nconst App = () => {\n  \n \n\n\n  return (\n    <WidgetsProvider>\n      <ReactFlowChart />\n    </WidgetsProvider>\n   \n  );\n};\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}