{"version":3,"sources":["WidgetsContext.js","Sidebar.js","Inputs.js","FormPreview.js","DatasourcePreview.js","PreviewForm.js","FormWidget.js","DataSourceWidget.js","EmailPreview.js","EmailWidget.js","ReactFlow.js","App.js","reportWebVitals.js","index.js"],"names":["WidgetsContext","createContext","WidgetsProvider","props","createData","state","payload","currentNode","createChildren","node_id","children","createParent","parent","parentData","data","addData","Object","keys","forEach","elem","addNewItem","removeData","newState","reduce","obj","key","field","removeItem","source","target","console","log","length","id","newChildren","getNewChildren","React","useReducer","action","type","globalState","dispatch","Provider","value","Sidebar","onDragStart","event","nodeType","dataTransfer","setData","effectAllowed","className","draggable","inputField","Input","TextArea","placeholder","onChange","evt","TextField","style","padding","CheckboxField","onHandleCheckbox","span","onHandleChange","map","title","VALIDATE_FORM_MESSAGES_TEMPLATE","required","types","email","number","url","range","string","max","whitespace","FormPreview","layoutType","fields","onHandleSubmit","useContext","getFieldsList","propsNoA","push","formItemLayout","labelCol","wrapperCol","margin","buttonItemLayout","offset","inputs","inputPlaceholder","rules","name","layout","onFinish","values","onFinishFailed","errorInfo","validateMessages","inputLabel","Item","inputName","htmlType","DatasourcePreview","useState","visible","setVisible","columns","setColumns","dataSource","setDataSource","isLoading","setIsLoading","useForm","handleSubmit","control","reset","getApiUrl","slug_input","getData","apiUrl","pickFields","fetch","then","response","json","result","tableColumns","dataIndex","catch","e","isParentDataExist","onClick","width","centered","onOk","onCancel","onSubmit","as","color","background","borderColor","border","loading","Option","Select","PreviewForm","previewLayout","setPreviewLayout","label","d","footer","FormWidget","newNode","onHandleNode","onHandleDrawer","register","errors","displayFields","setDisplayFields","formWidgetKey","inputValue","ref","previousDisplayFields","icon","PlusOutlined","defaultValue","header","bordered","renderItem","item","index","actions","deleteField","active","Meta","memo","DataSourceWidget","setPickFields","formName","formFields","setFormFields","defaultValues","widgetType","isSelected","dataSourceData","size","indexOf","filteredItems","filter","EmailPreview","a","method","headers","body","JSON","stringify","message","success","error","rows","marginTop","EmailWidget","defaultChecked","form_data","emailSource","getId","ReactFlowChart","setNewNode","setWidgetType","visibleDrawer","setVisibleDrawer","reactFlowWrapper","useRef","reactFlowInstance","setReactFlowInstance","elements","setElements","useEffect","els","el","updateNode","updatedNode","widgets","previousVisible","position","onElementsRemove","elementsToRemove","removeElements","onConnect","params","addEdge","onNodeDoubleClick","element","preventDefault","onLoad","_reactFlowInstance","onDrop","reactFlowBounds","current","getBoundingClientRect","project","x","clientX","left","y","clientY","top","test","formType","es","concat","onDragOver","dropEffect","snapToGrid","gap","placement","closable","onClose","App","ReactFlow","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bad8c9df.chunk.js","sourcesContent":["import React, {createContext} from 'react';\nexport const WidgetsContext = createContext();\n\nexport const WidgetsProvider = props => {\n    const initialState = {}\n\nconst reducer = (state, action) => {\n    const { payload } = action;\n    switch (action.type) {\n      case \"CREATE_OBJECT\":\n      return addNewItem(state, payload);\n      case \"REMOVE_OBJECT\": \n      return removeItem(state, payload);\n      case \"CREATE_CHILDREN\":\n      return createChildren(state, payload.node_id, payload.children); \n      case \"CREATE_PARENT\":\n      return createParent(state, payload.node_id, payload.parent); \n      case \"ADD_DATA\":\n      return addData(state, payload);    \n      case \"CREATE_DATA\": \n      return createData(state, payload);\n      case \"REMOVE_DATA\":\n      return removeData(state, payload);    \n      default:\n      return state;    \n  }};\n\n  const createData = (state, payload) => {\n    return {...state, [state.currentNode]: {...state[state.currentNode],  ...payload}};\n  }\n\n  const createChildren = (state, node_id, children) => {\n    // \n    let newState = {\n      ...state,\n      [node_id]: {\n        ...state[node_id],\n        children: {\n          ...state[node_id].children, ...{[children]: ''}\n        },\n       \n      }\n    }\n    return newState;\n  }\n  const createParent = (state, node_id, parent) => {\n    // \n    const parentData = state[parent];\n    if(parentData.data){\n      state[node_id]['parentData'] = parentData.data;\n    }\n    let newState = {\n      ...state,\n      [node_id]: {\n        ...state[node_id],\n        ...state[node_id].parent, parent}\n       \n      }\n    \n    return newState;\n  }\n\n  const addData = (state, payload) => {\n    const {currentNode, data} = payload;\n    // const presentNode = state;\n    state[currentNode].data = data;\n    if(state[currentNode].children){\n      const children = Object.keys(state[currentNode].children);\n      children.forEach((elem) => {\n        state[elem].parentData = data;\n      })\n    }\n    \n    return {...state, currentNode: currentNode };\n  }\n\n  const addNewItem = (state, payload) => {\n      // \n    //   return {...state, [payload]: {}, currentNode: payload };\n      if(!state[payload]){\n        return {...state, [payload]: {children:null, parent:null}, currentNode: payload };\n      }\n      return {...state, currentNode: payload };\n    \n  }\n\n  const removeData = (state, payload) => {\n     \n    //  delete state[payload.currentNode][payload.field]; \n    const newState = Object.keys(state[payload.currentNode]).reduce((obj, key)=>{\n        if(key !== payload.field){\n         obj[key] = state[payload.currentNode][key] \n        }\n      return obj\n     },{})\n     return {...state, [state.currentNode]: {...newState}};\n  }\n  \n  const removeItem = (state, payload) => {\n    console.log(payload);\n    let newState;\n    let source;\n    let target;\n\n    if(payload.length > 1){\n      source = payload[1].source;\n      target = payload[1].target;\n     }\n    //  else{\n    //   source = payload[1].source;\n    //   target = payload[1].target;\n    //  }\n    \n    if(payload[0].id && (!payload[0].source || !payload[0].target)){\n      newState = Object.keys(state).reduce((obj, key)=>{\n        if(key !== payload[0].id){\n         obj[key] = state[key];\n        }\n      return obj\n     },{});\n     \n     if(payload.length > 1){\n      const newChildren = getNewChildren(source, target, newState);\n     // console.log(test)\n     if(newState[source]){\n      newState[source].children = newChildren;\n     }\n    \n     }\n\n    \n    }\n    //For Deleting edge\n    else if(payload[0].source || payload[0].target){\n      newState = Object.keys(state).reduce((obj, key)=>{\n        if(key !== payload[0].id){\n         obj[key] = state[key];\n        }\n      return obj\n     },{});\n     \n     const newChildren = getNewChildren(payload[0].source, payload[0].target, newState);\n      // console.log(test)\n     \n      newState[payload[0].source].children = newChildren;\n      newState[payload[0].target].parent = null;\n      if(newState[payload[0].target].parentData){\n        \n        newState[payload[0].target].parentData = null;\n      }\n      \n      \n      // newState[payload[0].target].parent = null;\n    }\n\n    return {...newState, currentNode: null}\n  }\n\n  const getNewChildren = (source, target, newState) => {\n    \n    // console.log(delete newState[source].children[target]);\n    if(newState[source]){\n      return Object.keys(newState[source].children).reduce((obj, key) => {\n        if(key !== target){\n          obj[key] = newState[source].children[key];\n        }\n        return obj\n    },{});\n    }\n    return newState;\n    \n  }\n\n  const [globalState, dispatch] = React.useReducer(reducer, initialState);\n        \n    return(\n        <WidgetsContext.Provider value={[globalState, dispatch]}>\n            {props.children}\n        </WidgetsContext.Provider>\n    )\n}","import React from 'react';\n\nconst Sidebar=  () => {\n  const onDragStart = (event, nodeType) => {\n    event.dataTransfer.setData('application/reactflow', nodeType);\n    event.dataTransfer.effectAllowed = 'move';\n  };\n\n  return (\n    <aside>\n      <div className=\"description\">You can drag these nodes to the pane on the right.</div>\n      <div className=\"dndnode form\" onDragStart={(event) => onDragStart(event, 'form')} draggable>\n        Form Widget\n      </div>\n      <div className=\"dndnode dataSource\" onDragStart={(event) => onDragStart(event, 'dataSource')} draggable>\n        DataSource\n      </div>\n       <div className=\"dndnode output\" onDragStart={(event) => onDragStart(event, 'email')} draggable>\n        Email Widget\n      </div>\n    </aside>\n  );\n};\n\nexport default Sidebar;","import React from \"react\";\nimport { Input, Checkbox, Row, Col } from \"antd\";\n\nconst { TextArea } = Input;\n\n\nexport const inputField = (placeholder, onChange ) => {\n    return <Input placeholder={placeholder} onChange={(evt) => onChange()} />;\n};\n\n\nexport const TextField  =  (props) => {\n    return (\n     <Input {...props} style={{padding: '10px'}}/>\n    );\n  };\n\n export const textArea = (props) => {\n     return (\n        <TextArea {...props} />\n     )\n } \n\n \n\n\n  export const CheckboxField  =  (props) => {\n     const { data, onHandleCheckbox, span } = {...props}; \n     \n     const onHandleChange = (evt) => {\n        const { target } = evt; \n        const { value } = target;\n        onHandleCheckbox(value);\n     } \n    return (\n        <div>\n  {data.map((elem) => (\n            <Row>\n                <Col span={span || 8}>\n                 <Checkbox value={elem.value} onChange={onHandleChange}>{elem.title}</Checkbox>\n                </Col>\n            </Row>\n            ))}\n        </div>\n          \n\n\n    );\n  };  \n\n  export const CheckboxFieldObject  =  (props) => {\n    const { data, onHandleCheckbox, span } = {...props}; \n    \n    const onHandleChange = (elem) => {\n       onHandleCheckbox(elem);\n    } \n   return (\n       <div>\n {data.map((elem) => (\n           <Row>\n               <Col span={span || 8}>\n                <Checkbox value={elem.value} defaultChecked={elem.defaultChecked} onChange={() => onHandleChange(elem)}>{elem.title}</Checkbox>\n               </Col>\n           </Row>\n           ))}\n       </div>\n         \n\n\n   );\n };  ","/* eslint-disable no-template-curly-in-string */\nimport { useContext, useEffect, useState } from 'react';\nimport { TextField } from \"./Inputs\";\nimport { Form, Input, Button, Checkbox, Row, Col } from 'antd';\nimport { WidgetsContext } from './WidgetsContext';\n// const layout = {\n//   labelCol: {\n//     span: 4,\n//   },\n//   wrapperCol: {\n//     span: 16,\n//   },\n// };\n// const tailLayout = {\n//   wrapperCol: {\n//     offset: 4,\n//     span: 16,\n//   },\n// };\n\nconst VALIDATE_FORM_MESSAGES_TEMPLATE = {\n  required: \"${label} is required!\",\n  types: {\n    email: 'Enter a valid email!',\n    number: \"${label} is not a validate number!\",\n    url: \"${label} is not a valid url!\",\n  },\n  number: {\n    range: \"${label} must be between ${min} and ${max}\",\n  },\n  string: {\n    max: \"Character count cannot exceed ${max}\",\n  },\n  whitespace: \"${label} cannot be empty!\",\n};\n  \n\nconst FormPreview = (props) => {\n  \n  const { fields, layoutType, onHandleSubmit } = {...props}; \n  \n  const [globalState, dispatch] = useContext(WidgetsContext); \n  \n  // useEffect(()=>{\n  //   \n  //   const keys = currentNode && Object.keys(globalState[currentNode]); \n  //   globalState[currentNode] && keys.forEach((elem) => {\n  //     setFormFields([...formFields, globalState[currentNode][elem]]);\n  //   });\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  // },[globalState[currentNode]])\n\n  const getFieldsList = () => {\n    const fields = [];\n    const { currentNode } = globalState;\n    \n    if(currentNode){\n    const { children, parent, data, ...propsNoA } = globalState[currentNode];\n    \n    const keys = currentNode && Object.keys(propsNoA); \n    globalState[currentNode] && keys.forEach((elem) => {fields.push(propsNoA[elem])});\n    \n    }\n    return fields; \n  }\n  const formItemLayout =\n    layoutType === 'horizontal'\n      ? {\n          labelCol: { span: 6 },\n          wrapperCol: { span: 14 },\n        }\n      : (layoutType === 'vertical') ? {\n        labelCol: { span: 6 },\n        wrapperCol: { span: 23 },\n      } : null;\n  const margin =  layoutType === 'horizontal' ? '0px 15px' : '0px 28px';\n  const buttonMargin = layoutType === 'horizontal' ? '' : '700px';    \n\n  const buttonItemLayout =\n  layoutType === 'horizontal'\n      ? {\n          wrapperCol: { span: 13, offset: 9 },\n        }\n      : (layoutType === 'vertical') ? \n        {\n          wrapperCol: { span: 7, offset: 17 },\n        } : null;\n  \n  const onFinish = (values) => {\n    console.log('Success:', values);\n    const {currentNode} = globalState;\n    if(currentNode){\n      dispatch({ type: \"ADD_DATA\", payload: {currentNode: currentNode, data: values} });\n    }\n    // onHandleSubmit();\n  };\n\n  const onFinishFailed = (errorInfo) => {\n    console.log('Failed:', errorInfo);\n  };\n\n    const inputs = {\n    'text':  (elem) => {\n        return <TextField placeholder={elem?.inputPlaceholder || ''} type={elem.type} rules={[]}\n        />\n     },\n     'email':  (elem) => {\n        return <TextField  placeholder={elem?.inputPlaceholder || ''} type={elem.type} rules={[{ type: \"email\" }]}\n        />\n     },\n     'number':  (elem) => {\n      return <TextField placeholder={elem?.inputPlaceholder || ''} type={elem.type} rules={[{ type: \"number\" }]}\n      />\n   }\n    }\n\n  \n  return (\n    <Form\n      {...formItemLayout}\n      name=\"basic\"\n      layout={layoutType}\n      // initialValues={{\n      //   remember: true,\n      // }}\n      \n      onFinish={onFinish}\n      onFinishFailed={onFinishFailed}\n      validateMessages={VALIDATE_FORM_MESSAGES_TEMPLATE}\n    >\n\n                {\n                    getFieldsList().map((elem) => (\n                        <>\n                            \n                         \n       <label>{elem.inputLabel}</label>               \n      <Form.Item\n        \n        name={['form', `${elem.inputName}`]}\n        >\n        {inputs[elem.type](elem)}\n      </Form.Item>\n\n                          \n                            \n                        </>\n                       \n                    ))\n                }\n\n\n{getFieldsList().length > 0 && <Form.Item {...buttonItemLayout} >\n        <Button type=\"primary\" htmlType=\"submit\" style={{margin: margin}}>\n          Submit\n        </Button>\n        <Button type=\"\" htmlType=\"\" style={{margin: margin}}>\n          Cancel\n        </Button>\n      </Form.Item> }\n\n      {/* <Row>\n        <Col offset={19}>\n        {getFieldsList().length > 0 && <Form.Item {...buttonItemLayout}>\n        <Button type=\"primary\" htmlType=\"submit\" style={{margin: '0px 22px'}}>\n          Submit\n        </Button>\n        <Button type=\"\" htmlType=\"\">\n          Cancel\n        </Button>\n      </Form.Item> }\n        </Col>\n      </Row> */}\n      \n\n    {/* { layoutType === 'vertical' ? \n      <Row>\n        <Col offset={19}>\n        {getFieldsList().length > 0 && <Form.Item {...buttonItemLayout}>\n        <Button type=\"primary\" htmlType=\"submit\" style={{margin: '0px 22px'}}>\n          Submit\n        </Button>\n        <Button type=\"\" htmlType=\"\">\n          Cancel\n        </Button>\n      </Form.Item> }\n        </Col>\n      </Row>\n      : \n      <Row>\n        <Col offset={8}>\n                {\n                   getFieldsList().length > 0 && <Form.Item {...buttonItemLayout}>\n        <Button type=\"primary\" htmlType=\"submit\" >\n          Submit\n        </Button>\n        <Button type=\"\" htmlType=\"\">\n          Cancel\n        </Button>\n      </Form.Item> \n                }\n        </Col>\n      </Row>\n     \n              } */}\n\n      \n\n      \n\n     \n\n     \n    </Form>\n  );\n};\n\n\nexport default FormPreview;","import { useState, useContext, useEffect  } from 'react';\nimport { WidgetsContext } from './WidgetsContext';\nimport { Modal, Button, Table, Row, Col, Spin } from 'antd';\nimport { TextField } from \"./Inputs\";\n\nimport { useForm, Controller } from \"react-hook-form\";\n\n\n\nconst DatasourcePreview =  (props) => {\n    const [globalState, dispatch] = useContext(WidgetsContext); \n    const { currentNode } = globalState;\n    const [visible, setVisible] = useState(false);\n    const [columns, setColumns] = useState([]);\n    const [dataSource, setDataSource] = useState([]);\n    const [isLoading, setIsLoading] = useState(false);\n   \n   \n    \n    const { handleSubmit, reset, control } = useForm();\n    const getApiUrl = (slug_input, url) => slug_input ? `${url}/${slug_input}` : url; \n    const getDataSource = () => {\n        const {slug_input, url, pickFields} = globalState[currentNode];\n        const apiUrl = getApiUrl(slug_input, url);\n        setIsLoading(true);\n        getData(apiUrl, pickFields);\n      }\n\n    const onSubmit = data => { \n      const {url, pickFields} = globalState[currentNode];\n      const { slug_input } = data;\n      const apiUrl = getApiUrl(slug_input, url);\n      setIsLoading(true);\n      getData(apiUrl, pickFields);\n      // reset();\n  };\n\n  const getData = (apiUrl, pickFields) => {\n    fetch(apiUrl)\n        .then(response => response.json())\n        .then(result => {\n           const tableColumns = pickFields.map((elem) => ({title:elem, dataIndex: elem, key: elem}));\n           setColumns(tableColumns);\n           setDataSource([result]);\n           dispatch({ type: \"ADD_DATA\", payload: {currentNode: currentNode, data: [result]} });\n           setVisible(true)\n           setIsLoading(false);\n        })\n        .catch(e => {\n            console.log(e);\n            setVisible(false)\n        });\n  }\n    \n\n  const getParentData = () => {\n    const {currentNode} = globalState;\n    if(currentNode){\n      const {parent}  = globalState[currentNode];\n      console.log(globalState[parent]);\n    }\n    \n  }   \n\n  const isParentDataExist = () => {\n    const {currentNode} = globalState;\n    \n    if(currentNode){\n      const {parent}  = globalState[currentNode];\n      return parent && globalState[parent]; \n    }\n    return false;\n    \n  }\n   \n \n    \n   \n  return (\n    <div>\n      <Row>\n        <Col>\n        {isParentDataExist() && <Button type=\"primary\" onClick={getParentData} style={{margin: \"10px\"}}>\n          Get Parent Data\n        </Button>}\n        \n        </Col>\n      </Row>\n     \n       <Button type=\"primary\" onClick={getDataSource} style={{margin: '10px', width: '29%'}}>\n        Preview\n      </Button>\n      <Modal\n        title=\"Data Source\"\n        centered\n        visible={visible}\n        onOk={() => setVisible(false)}\n        onCancel={() => setVisible(false)}\n        width={600}\n        \n      >\n         <div style={{padding: \"10px\"}}>\n              \n            <form onSubmit={handleSubmit(onSubmit)}>\n            <Row>\n              <Col span={20}>\n              <Controller\n               as={<TextField placeholder='Enter id.....' />}\n               control={control}\n               rules={{ required: true }}\n               name=\"slug_input\"\n               style={{padding: '10px', margin: '10px'}}\n               />\n              </Col>\n              <Col span={4}>\n                 <input type=\"submit\"  style={{\n                   padding: '10px', \n                   margin: '0px 5px', \n                   color: '#fff',\n                   background: '#1890ff',\n                   borderColor: '#1890ff',\n                   border: '1px solid #1890ff'}}/>\n              </Col>\n            </Row>\n            \n             </form>\n                 \n            </div>\n         { !isLoading && <Table dataSource={dataSource} columns={columns} loading={isLoading}/> }\n         {/* <Spin size=\"large\" /> */}\n         {/* {isLoading.toString()} */}\n      </Modal>\n    </div>\n    \n  );\n};\n\nexport default DatasourcePreview;\n\n","import React, { useState, useContext, useEffect } from 'react';\n\nimport FormPreview from './FormPreview';\nimport DatasourcePreview from './DatasourcePreview';\nimport { WidgetsContext } from './WidgetsContext';\n\nimport { Modal, Button, Row, Col, Select } from 'antd';\nconst { Option } = Select;\n\nconst PreviewForm = (props) => {\n  const [globalState, dispatch] = useContext(WidgetsContext); \n  const [previewLayout, setPreviewLayout] = useState('vertical'); \n  // console.log(globalState);\n  const [fields, setFormFields] = useState([]);\n  const [visible, setVisible] = useState(false);\n  const layoutType = [\n    { value: \"vertical\", label: \"Vertical\" },\n    { value: \"horizontal\", label: \"Horizontal\" },\n    { value: \"inline\", label: \"Inline\" },\n  ];\n\n\n\n\n \n\n  const updateFormFields = () => {\n    // const { currentNode } = globalState;\n    // const keys = currentNode && Object.keys(globalState[currentNode]); \n    \n    // globalState[currentNode] && keys.forEach((elem) => {\n    //   fields.push(globalState[currentNode][elem]);\n    //   setFormFields(fields);\n    //   console.log(fields);\n    //     // setFormFields([...fields, globalState[currentNode][elem]]);\n    // });\n    setVisible(true) \n    // dispatch({ type: \"CREATE_LAYOUT\", payload: {layoutType : previewLayout} });\n  }\n\n  const onHandleLayoutChange = (evt) => {\n    setPreviewLayout(evt);\n  }\n  const onHandleSubmit = () => {\n    setVisible(false)\n  }\n  const getParentData = () => {\n    const {currentNode} = globalState;\n    if(currentNode){\n      const {parent}  = globalState[currentNode];\n      console.log(globalState[parent]);\n    }\n    \n  }   \n\n  const isParentDataExist = () => {\n    const {currentNode} = globalState;\n    \n    if(currentNode){\n      const {parent}  = globalState[currentNode];\n      return parent && globalState[parent]; \n    }\n    return false;\n    \n  }\n\n    \n  return (\n    <>\n      <Row>\n        <Col>\n         {isParentDataExist() && <Button type=\"primary\" onClick={getParentData} style={{margin: \"10px\"}}>\n          Get Parent Data\n        </Button>}\n        </Col>\n      </Row>\n      <Row>\n      <Col span={8}>\n      <Button type=\"primary\" onClick={updateFormFields} style={{margin: '10px', width: '86%'}}>\n        Preview Form\n      </Button>\n      </Col>\n      <Col span={16}>\n        <Row style={{margin:\"10px\"}}>\n          <Col span={8}>\n            <label>Layout Type</label> \n          </Col>\n          <Col span={15}>\n          <Select style={{width: '100%'}} onChange={onHandleLayoutChange} placeholder=\"Choose Layout Type\">\n                {layoutType.map(d => {\n                  return (\n                    <Option key={d.value} value={d.value} >\n                      {d.label}\n                    </Option>\n                  );\n                })}\n        </Select>\n          </Col>\n        </Row>\n       \n     \n      </Col>\n    </Row>\n     \n      <Modal\n        title=\"Form\"\n        centered\n        visible={visible}\n        onOk={() => setVisible(false)}\n        onCancel={() => setVisible(false)}\n        width={1000}\n        footer={null}\n      >\n         \n         <FormPreview fields={fields} layoutType={previewLayout} onHandleSubmit={onHandleSubmit}/>\n\n       \n      </Modal>\n    </>\n  );\n};\n\nexport default PreviewForm;\n","import React, {useState, useContext, useEffect, memo} from 'react';\n\nimport PreviewForm  from './PreviewForm';\n\nimport { Input, Button, Select, Row, Col, List, Skeleton } from \"antd\";\nimport { PlusOutlined } from '@ant-design/icons';\nimport { useForm, Controller } from \"react-hook-form\";\nimport { WidgetsContext } from './WidgetsContext';\nimport { inputField } from \"./Inputs\";\nconst { Option } = Select;\n\nconst FormWidget =  (props) => {\n  const [globalState, dispatch] = useContext(WidgetsContext);\n  const { currentNode } = globalState;\n  // const [fields, setFormFields] = useState([]);\n  const { newNode, onHandleNode, onHandleDrawer } = {...props};  \n  const { handleSubmit, register, errors, control, reset } = useForm();\n  const [displayFields, setDisplayFields] = useState(true);\n  \n  const onSubmit = data => { \n      if(Object.keys(data).length > 0){\n        const field = Object.keys(globalState[currentNode]).length + 1;\n      const formWidgetKey = {[`field${field}`]: {...data, 'field': `field${field}`}};\n      dispatch({ type: \"CREATE_DATA\", payload: formWidgetKey });\n      reset({\n        type: '',\n        inputLabel: '', \n        inputValue: '', \n        inputPlaceholder:'',\n        inputName: ''\n      });\n      }\n      \n      \n  };\n\n  const types = [\n    { value: \"text\", label: \"Text\" },\n    { value: \"email\", label: \"Email\" },\n    { value: \"number\", label: \"Number\" }\n  ];\n  let fields = [];\n  const getFieldsList = () => {\n    \n    const { currentNode } = globalState;\n    if(currentNode && globalState[currentNode]){\n      const { children, parent, ...propsNoA } = globalState[currentNode];\n    console.log(propsNoA);\n    const keys = currentNode && Object.keys(propsNoA); \n    globalState[currentNode] && keys.forEach((elem) => {\n      fields.push(globalState[currentNode][elem])\n    });\n    return fields; \n    }\n    \n  }\n \n\n  const editField = (index) => {\n    // console.log('Edit');\n    const { type, inputLabel, inputValue, inputPlaceholder, inputName } = fields[index];\n    reset({\n      type, inputLabel, inputValue, inputPlaceholder, inputName\n\n    });\n  }\n\n  \n \n  const deleteField = (index) => {\n    const { currentNode } = globalState;\n    const field = fields[index].field;\n    dispatch({ type: \"REMOVE_DATA\", payload: {field:field, currentNode: currentNode }});\n    getFieldsList(); \n  }\n \n    \n   \n  return (\n    <div>\n      <PreviewForm />\n      <form onSubmit={handleSubmit(onSubmit)}>\n            <div style={{padding: \"15px\"}}>\n              \n              <Input placeholder=\"Form Name\" ref={register} value={newNode?.data?.label} onChange={(evt) => onHandleNode(evt)}/>\n            </div>\n            <div style={{padding: \"15px\"}}>\n            <Button\n                type=\"dashed\"\n                onClick={() => setDisplayFields(previousDisplayFields => !previousDisplayFields)}\n                style={{ width: '100%'}}\n                icon={<PlusOutlined />}\n              >\n                Add Field\n              </Button>\n            </div>\n            \n            \n            {!displayFields && \n            <div>\n            <section>\n              <Row>\n                <Col span={24} style={{padding: \"15px\"}}>\n                <label>Select Type</label>\n                <Controller\n               \n               as={\n               <Select style={{width: '100%'}} placeholder=\"Choose Field Type\">\n                {types.map(d => {\n                  return (\n                    <Option key={d.value} value={d.value} >\n                      {d.label}\n                    </Option>\n                  );\n                })}\n              </Select>}\n               control={control}\n               rules={{ required: true }}\n               name=\"type\"/>\n                </Col>\n              </Row>\n              \n               {errors.type && (\n\t\t\t\t\t        <span className='error'>This field is required</span>\n\t\t\t\t        )}\n               <Row>\n                <Col span={24} style={{padding: \"15px\"}}>\n                <label>Input Label</label>\n                <Controller\n               as={inputField(\"Input Label\")}\n               control={control}\n               ref={register({ required: true, value: 'test' })}\n              //  defaultValue=\"inputLabel\"\n               rules={{ required: true }}\n               defaultValue=''\n               name=\"inputLabel\"/>\n                </Col>   \n              </Row> \n              <Row>\n                <Col span={24} style={{padding: \"15px\"}}>\n                <label>Input Placeholder</label>\n                <Controller\n               placeholder=\"Input Placeholder\"\n               defaultValue=''\n               as={inputField(\"Input Placeholder\")}\n               ref={register({ required: true })}\n               rules={{ required: true }}\n               control={control}\n               name=\"inputPlaceholder\"/>\n                </Col>\n              </Row>\n              <Row>\n                <Col span={24} style={{padding: \"15px\"}}>\n                <label>Input Name</label>\n                <Controller\n               placeholder=\"Input Name\"\n               as={inputField(\"Input Name\")}\n               ref={register({ required: true })}\n               rules={{ required: true }}\n               control={control}\n               name=\"inputName\"/>\n                </Col>\n              </Row>\n              {/* <Row>\n                <Col span={24}>\n                <label>Input Value</label>\n                <Controller\n               placeholder=\"Input Value\"\n               as={inputField(\"Input Value\")}\n               defaultValue=''\n               ref={register({ required: false })}\n               rules={{ required: false }}\n               control={control}\n               name=\"inputValue\"/>\n                </Col>\n              </Row> */}\n              \n              \n               \n            </section>\n           \n          </div> }\n          <div style={{padding: \"15px\"}}>\n            <Button type=\"primary\" htmlType=\"submit\" style={{width: '40%', margin: '0px 20px'}}>Submit</Button>\n            <Button onClick={onHandleDrawer} style={{width: '40%', margin: '0px 20px'}}>Cancel</Button>\n          </div>\n          \n          \n           \n          <List\n          header={<div>Form Fields</div>}\n          bordered\n          dataSource={getFieldsList()}\n          renderItem={(item, index) => (\n        <>\n            {item.type &&\n           <List.Item\n          //  onClick={() => editField(index)}\n          // <a key=\"list-loadmore-edit\" >edit</a>\n            actions={[<a key=\"list-loadmore-more\" onClick={() => deleteField(index)}>delete</a>]}\n          >\n        \n            <Skeleton loading={item.loading} active>\n            <List.Item.Meta\n               \n                title={<h4>Type: {item.type}</h4>}\n                \n              />\n            </Skeleton>\n          </List.Item>}\n        </>\n       \n      )}\n    />\n          \n    </form>\n    </div>\n    \n  );\n};\n\nexport default memo(FormWidget);","import React, {  useState, useContext, memo } from 'react';\nimport { useForm, Controller } from \"react-hook-form\";\nimport { Button, Table, Input, Row, Col, Spin } from \"antd\";\nimport { WidgetsContext } from './WidgetsContext';\nimport { inputField, CheckboxField } from \"./Inputs\";\nimport DatasourcePreview from \"./DatasourcePreview\";\n\nconst DataSourceWidget =  (props) => {\n  const [globalState, dispatch] = useContext(WidgetsContext);\n  const { currentNode } = globalState;\n  const { newNode, onHandleNode, onHandleDrawer } = {...props};  \n  const [columns, setColumns] = useState([]);\n  const [pickFields, setPickFields] = useState([]);\n  const [dataSource, setDataSource] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  \n  const formName = 'form_dataSource_1';\n  const [formFields, setFormFields] = useState({[formName]: {}});\n  const { handleSubmit, register, control } = useForm({\n    defaultValues: {\n        slug_input: '',\n        url: 'https://jsonplaceholder.typicode.com/todos'\n    }\n  });\n\n\n  \n  const getApiUrl = (slug_input, url) => slug_input ? `${url}/${slug_input}` : url; \n\n  const onSubmit = data => {\n    setIsLoading(true);\n    setDataSource([]);\n    \n    const { slug_input, url } = data;\n    const apiUrl = getApiUrl(slug_input, url);\n    fetch(apiUrl)\n    .then(response => response.json())\n    .then(result => {\n       setIsLoading(false);\n       const columns = Object.keys(result)\n       const tableColumns = columns.map((elem) => ({title:elem, value:elem, dataIndex: elem, key: elem, isSelected: false}));\n       \n      \n       const dataSourceData = {...data, columns, style:{}};\n       dispatch({ type: \"CREATE_DATA\", payload: dataSourceData });\n       setFormFields({...formFields, [formName]: dataSourceData})\n       setColumns(tableColumns);\n       setDataSource([result]);\n       \n    })\n    .catch(e => {\n        console.log(e);\n        setIsLoading(false);\n    });\n  }\n\n  const onHandleCheckbox = (value) => {\n    // let filteredItems;\n    let dataSource;\n    const pickFieldIndex = pickFields.indexOf(value);\n    if(pickFieldIndex === -1){\n      setPickFields([...pickFields, value]);\n      dataSource = {pickFields: [...pickFields, value] };\n     \n    }\n    else{\n      const filteredItems = pickFields.filter(function(item) {\n        return item !== value\n      })\n      setPickFields(filteredItems);\n      dataSource = {pickFields: filteredItems};\n    }\n    dispatch({ type: \"CREATE_DATA\", payload: {pickFields :dataSource.pickFields} });\n    \n   \n  \n     \n  }\n\n  return (\n      <div>\n         <DatasourcePreview widgetType='datasource' />\n         <Input style={{padding: '10px', margin: '10px'}} placeholder=\"Form Name\" ref={register} value={newNode?.data?.label} onChange={(evt) => onHandleNode(evt)}/> \n        <form onSubmit={handleSubmit(onSubmit)}>\n        <div>\n            <section>\n              <label>Data Source</label>\n              <Controller\n               as={inputField(\"slug_input\")}\n               control={control}\n               rules={{ required: true }}\n               name=\"slug_input\"\n               style={{padding: '10px', margin: '10px'}}\n               />\n               <Controller\n               as={inputField(\"Url\")}\n               control={control}\n               rules={{ required: true }}\n               name=\"url\"\n               style={{padding: '10px', margin: '10px'}}\n               />\n            </section>\n        </div> \n          <div style={{padding: '10px', margin: '10px'}}>\n            <Button type=\"primary\" htmlType=\"submit\" style={{width: '50%'}}> Submit</Button>\n            <Button onClick={onHandleDrawer} style={{width: '50%'}}>Cancel</Button>\n            \n          </div>\n          <div >\n            {isLoading && <Spin size=\"large\" style={{width: '100%'}} />}\n          </div>\n\n          </form>\n          {/* { !isLoading && <Table dataSource={dataSource} columns={columns} /> } */}\n\n          <Row>\n            <Col>\n              <h4>Pick Fields</h4>\n              <CheckboxField data={columns} onHandleCheckbox={onHandleCheckbox}/>\n            </Col>\n           \n            \n            {/* {dataSource.length > 0 && formFields[formName]} */}\n          </Row>\n         \n          \n        \n      </div>\n    \n\n\n  \n  \n  );\n};\n\nexport default memo(DataSourceWidget);","import { useState, useContext, useEffect  } from 'react';\nimport { WidgetsContext } from './WidgetsContext';\nimport { Modal, Button, Table, Row, Col, Spin, message } from 'antd';\nimport { TextField } from \"./Inputs\";\n\nimport { useForm, Controller } from \"react-hook-form\";\n\n\n\nconst EmailPreview =  (props) => {\n    const [globalState, dispatch] = useContext(WidgetsContext); \n    const { currentNode } = globalState;\n    const [isLoading, setIsLoading] = useState(false);\n    const [visible, setVisible] = useState(false);\n    // console.log(globalState[currentNode]);\n    \n   \n   \n    \n    const { handleSubmit, register, errors, control, reset } = useForm();\n    const onSubmit = async (data) => { \n    //   http://localhost:3000/mail/sendEmail\n        setIsLoading(true);\n      try{\n          const response = await fetch('https://onsalon.herokuapp.com/mail/sendEmail', {\n              method: 'post',\n              headers: {\n                  'Accept': 'application/json',\n                  'Content-Type': 'application/json'\n                },\n              body: JSON.stringify(data)\n            });\n            dispatch({ type: \"ADD_DATA\", payload: {currentNode: currentNode, data: data} });\n            message.success('Email has been sent kindly check your email thanks!!!!');\n            setIsLoading(false);\n            setVisible(false);\n          \n      }\n      catch(e){\n          console.log(e);\n          message.error('Error in sending your email sorry for the inconvenience');\n          setVisible(false);\n          setIsLoading(false);\n\n      }\n    };\n\n    const onHandleEmailPreview = () => {\n        setVisible(true);\n    }\n\n \n    const inputs = {\n        'text':  (elem) => {\n            return <TextField placeholder={elem?.inputPlaceholder || ''} type={elem.type} rules={[]}\n            />\n         },\n         'email':  (elem) => {\n            return <TextField  placeholder={elem?.inputPlaceholder || ''} type={elem.type} rules={[{ type: \"email\" }]}\n            />\n         },\n         'password':  (elem) => {\n          return <TextField placeholder={elem?.inputPlaceholder || ''} type={elem.type} rules={[{ type: \"password\" }]}\n          />\n       }\n        }\n    \n\n   \n        const getParentData = () => {\n          const {currentNode} = globalState;\n          if(currentNode){\n            const {parent}  = globalState[currentNode];\n            console.log(globalState[parent]);\n          }\n          \n        }   \n      \n        const isParentDataExist = () => {\n          const {currentNode} = globalState;\n          \n          if(currentNode){\n            const {parent}  = globalState[currentNode];\n            return parent && globalState[parent]; \n          }\n          return false;\n          \n        }\n \n    \n   \n  return (\n    <div>\n      <Row>\n        <Col>\n        {isParentDataExist() && <Button type=\"primary\" onClick={getParentData} style={{margin: \"10px\"}}>\n          Get Parent Data\n        </Button>}\n        </Col>\n      </Row>\n     \n       <Button type=\"primary\" onClick={onHandleEmailPreview} style={{margin: '10px', width: '86%'}}>\n        Preview \n      </Button>\n      <Modal\n        title=\"Email Preview\"\n        centered\n        visible={visible}\n        onOk={() => setVisible(false)}\n        onCancel={() => setVisible(false)}\n        width={600}\n        footer={null}\n      >\n         <div style={{padding: \"10px\"}}>\n         {isLoading && <Spin size=\"large\" style={{width: '100%'}} />}\n           <form onSubmit={handleSubmit(onSubmit)}>\n           <div style={{padding: \"10px\"}}>\n            <section>\n              {/* {\n                globalState && \n                globalState[currentNode] && \n                globalState[currentNode].emailSource?.length > 0 &&\n                globalState[currentNode]?.emailSource.map((elem) => (\n                <Row>\n                <Col span={24}>\n                <label>{elem.title}</label>\n                <Controller\n                as={inputs[elem.type](elem)}\n                control={control}\n                defaultValue=''\n                rules={{ required: true }}\n                name={elem.value}/>\n                </Col>   \n              </Row>\n\n                )) \n                //  globalState[currentNode]?.emailSource.length\n                }   */}\n              <Row>\n                <Col span={24} style={{padding: '10px'}}>\n                <label>Receiver Email</label>\n                <Controller\n                as={<TextField placeholder='Enter receiver email' type='email' rules={[]}/>}\n                control={control}\n                rules={{ required: true }}\n                defaultValue=''\n                name=\"to\"/>\n                </Col>   \n              </Row> \n              <Row>\n                <Col span={24} style={{padding: '10px'}}>\n                <label >Subject</label>\n                <Controller\n                as={<TextField  placeholder='Subject...' type='text' rules={[]}/>}\n                control={control}\n                rules={{ required: true }}\n                defaultValue=''\n                name=\"subject\"/>\n                </Col>   \n              </Row> \n              <Row>\n                <Col span={24} style={{padding: '10px'}}>\n              \n                <Controller\n                placeholder=\"Content\"\n                defaultValue=''\n                as={<textArea rows={4}  style={{width: '100%', padding: '5px', marginTop: '10px'}}/>}\n                ref={register({ required: true })}\n                rules={{ required: true }}\n                control={control}\n                name=\"content\"/>\n                </Col>\n              </Row>\n              <div>\n                <Row>\n                  <Col offset={14}>\n                 \n                <Button type=\"primary\" htmlType=\"submit\" style={{margin: '0px 26px'}}>\n                    Submit\n                </Button>\n                <Button type=\"\" htmlType=\"\" onClick={() => setVisible(false)}>\n                    Cancel\n                </Button>\n                  </Col>\n                </Row>\n              \n              </div>\n              \n              \n               \n            </section>\n           \n          </div> \n           </form>\n                 \n            </div>\n         \n         {/* <Spin size=\"large\" /> */}\n         {/* {isLoading.toString()} */}\n      </Modal>\n    </div>\n    \n  );\n};\n\nexport default EmailPreview;\n\n","import React, {useState, useContext, useEffect, memo} from 'react';\n\nimport EmailPreview  from './EmailPreview';\n\nimport { Input, Button, Select, Row, Col, List, Skeleton } from \"antd\";\nimport { PlusOutlined } from '@ant-design/icons';\nimport { useForm, Controller } from \"react-hook-form\";\nimport { WidgetsContext } from './WidgetsContext';\nimport { TextField, textArea, CheckboxFieldObject } from \"./Inputs\";\nconst { Option } = Select;\n\nconst EmailWidget =  (props) => {\n  const emailFields_ = [\n   {value: 'endpoint', title: 'End Point', type: 'text', inputPlaceholder: 'Enter Server End Point....', defaultChecked: false},\n   {value: 'email', title: 'Email', type: 'email', inputPlaceholder: 'Enter Email....', defaultChecked: false}, \n   {value: 'password', title: 'Password', type: 'password', inputPlaceholder: 'Enter Password....', defaultChecked: false}\n]  \n  const [globalState, dispatch] = useContext(WidgetsContext);\n  const [emailFields, setEmailFields] = useState(emailFields_);\n  const [fields, setFields] = useState([]);\n  \n  const { currentNode } = globalState;\n  const { onHandleDrawer } = {...props};  \n  const { handleSubmit, register, errors, control, reset } = useForm();\n \n//   useEffect(()=>{\n//     if(globalState[currentNode] && Object.keys(globalState[currentNode]).length === 0){\n//         setEmailFields([]);\n//     }\n//   },[currentNode])\n \n  const onHandleCheckbox = (elem) => {\n       \n        let emailData;\n        const { value } = elem; \n        const pickFieldIndex = fields.filter(function(item) {\n            return item.value === value\n          });\n        if(pickFieldIndex.length === 0){\n            setFields([...fields, elem]);\n            emailData = {fields: [...fields, elem] };\n     \n    }\n    else{\n      const filteredItems = fields.filter(function(item) {\n        return item.value !== value\n      })\n      \n      setFields(filteredItems);\n            emailData = {fields: filteredItems};\n    }\n    \n    dispatch({ type: \"CREATE_DATA\", payload: {emailSource :emailData.fields} });\n  }\n  \n \n\n  const onSubmit = (form_data) => {\n    let emailData = {fields: form_data};\n    dispatch({ type: \"CREATE_DATA\", payload: {emailSource :emailData.fields} });\n  }\n\n  \n \n  \n \n    \n   \n  return (\n    <div>\n        <Row>\n            <Col>\n             \n              <EmailPreview widgetType='email' />\n            </Col>\n\n        </Row>\n        <Row>\n        <Col span={22}>\n                 <h4>Server Fields</h4>\n                 <form onSubmit={handleSubmit(onSubmit)}>\n                    <Row>\n                        <Col span={24} style={{padding: '10px'}}>\n                        <label>URL</label>\n                        <Controller\n                        as={<TextField placeholder='Enter url.....' type=\"text\"/>}\n                        control={control}\n                        rules={{ required: true }}\n                        name=\"server_url\"\n                        style={{margin: '10px'}}\n                    />\n                    </Col>\n                    </Row>\n                    <Row>\n                        \n                        <Col span={24} style={{padding: '10px'}}>\n                        <label>Email</label>\n                        <Controller\n                        as={<TextField placeholder='Enter email.....' type=\"email\"/>}\n                        control={control}\n                        rules={{ required: true }}\n                        name=\"server_email\"\n                        style={{ margin: '10px'}}\n                    />\n                    </Col>\n                    </Row>\n                    <Row>\n                        <Col span={24} style={{padding: '10px'}}>\n                        <label>Password</label>\n                        <Controller\n                        as={<TextField placeholder='Enter password.....' type=\"password\"/>}\n                        control={control}\n                        rules={{ required: true }}\n                        name=\"server_password\"\n                        style={{ margin: '10px'}}\n                    />\n                    </Col>\n                    </Row>\n\n                     <Col span={4}>\n                     <input type=\"submit\"  style={{\n                   padding: '10px', \n                   margin: '10px', \n                   color: '#fff',\n                   background: '#1890ff',\n                   borderColor: '#1890ff',\n                   border: '1px solid #1890ff'}}/>\n                     </Col>\n        </form>\n                 {/* <CheckboxFieldObject data={emailFields} onHandleCheckbox={onHandleCheckbox} span={24}/> */}\n                 {/* {JSON.stringify(globalState[currentNode])} */}\n            </Col>\n        </Row>\n      \n    </div>\n    \n  );\n};\n\nexport default EmailWidget;","import React, { useState, useRef, useEffect, useContext } from 'react';\nimport ReactFlow, {\n  ReactFlowProvider,\n  addEdge,\n  removeElements,\n  Controls,\n  Handle,\n  Background\n} from 'react-flow-renderer';\nimport { WidgetsContext } from './WidgetsContext';\n\n\n\nimport Sidebar from './Sidebar';\nimport FormWidget from './FormWidget';\nimport DataSourceWidget from './DataSourceWidget';\nimport EmailWidget from './EmailWidget';\n\nimport { Drawer } from \"antd\";\nimport './dnd.css';\n\n\n\nlet id = 0;\nconst getId = () => `dndnode_${id++}`;\n// let parentNodes = ;\n\nconst customNodeStyles = {\n  background: '#9CA8B3',\n  color: '#FFF',\n  padding: 10,\n};\n\nconst CustomNodeComponent = ({ data }) => {\n  return (\n    <div style={customNodeStyles}>\n      <Handle type=\"target\" position=\"left\" style={{ borderRadius: 0 }} />\n      <div>{data.text}</div>\n      <Handle\n        type=\"source\"\n        position=\"right\"\n        id=\"a\"\n        style={{ top: '30%', borderRadius: 0 }}\n      />\n      <Handle\n        type=\"source\"\n        position=\"right\"\n        id=\"b\"\n        style={{ top: '70%', borderRadius: 0 }}\n      />\n    </div>\n  );\n};\n\n\nconst ReactFlowChart = () => {\n \n  const [globalState, dispatch] = useContext(WidgetsContext);\n  const [newNode, setNewNode] = useState({});\n  const [widgetType, setWidgetType] = useState('Form');\n  const [visibleDrawer, setVisibleDrawer] = useState(false);\n  const reactFlowWrapper = useRef(null);\n  const [reactFlowInstance, setReactFlowInstance] = useState(null);\n  const [elements, setElements] = useState([]);\n  const onConnect = (params) => {\n\n    // console.log(globalState);\n\n    // let parentNodes = JSON.parse(localStorage.getItem('parentNodes'));\n    // let childNodes = JSON.parse(localStorage.getItem('childNodes'));\n    // let parentNode = {...parentNodes,[params.source]: {...parentNodes[params.source], [params.target]:'' }};\n    // localStorage.setItem('parentNodes',JSON.stringify(parentNode));\n    // let childNode = {...childNodes,[params.target]: {...parentNodes[params.target], parent: params.source }};\n    // localStorage.setItem('childNodes',JSON.stringify(childNode));\n    setElements((els) => addEdge(params, els));\n    dispatch({\n      type: \"CREATE_CHILDREN\",\n      payload: {node_id: params.source, children:params.target},\n      \n    });\n    dispatch({\n      type: \"CREATE_PARENT\",\n      payload: {node_id: params.target, parent:params.source},\n      \n    });\n  };\n\n  const nodeTypes = {\n    special: CustomNodeComponent,\n  };\n  useEffect(() => {\n    setElements((els) =>\n      els.map((el) => {\n        if (el.id === newNode.id) {\n         el.data = {\n            ...el.data,\n            label: newNode.data.label,\n          };\n        }\n      return el;\n      })\n    );\n  }, [newNode, setElements]);\n  const onElementsRemove = (elementsToRemove) =>\n  {\n    console.log(elementsToRemove)\n    setElements((els) => removeElements(elementsToRemove, els));\n    dispatch({\n      type: \"REMOVE_OBJECT\",\n      payload: elementsToRemove,\n      \n    });\n  }\n    \n  const onLoad = (_reactFlowInstance) =>\n    setReactFlowInstance(_reactFlowInstance);\n  const onDragOver = (event) => {\n    event.preventDefault();\n    event.dataTransfer.dropEffect = 'move';\n  };\n\n  const deleteNode = (node, element) => {\n    // console.log(id);\n    setElements((els) => removeElements([element], els));\n   \n  }\n\n  const onDrop = (event) => {\n    event.preventDefault();\n    const reactFlowBounds = reactFlowWrapper.current.getBoundingClientRect();\n    const type = event.dataTransfer.getData('application/reactflow');\n    // setWidgetType(() => type);\n    const position = reactFlowInstance.project({\n      x: event.clientX - reactFlowBounds.left,\n      y: event.clientY - reactFlowBounds.top,\n    });\n    const id = getId();\n    const newNode = {\n      id: id,\n      type: 'default',\n      test: 'asd',\n      position,\n      data: { label: `${type} Widget`, widgetType: type},\n      // data: { label: <p>{type} Widget <span style={{position: 'relative',left: '35px',cursor: 'cell', bottom: '30px'}} \n      // onClick={(evt) => deleteNode(evt, newNode)}>Delete</span></p>, imgUrl: 'https://picsum.photos/50', widgetText: `${type} Widget`,  widgetType: type},\n      style: {\n        background: '#D6D5E6',\n        color: '#333',\n        border: '1px solid #222138',\n        width: 180,\n        padding: 10\n      },\n      formType: type\n    };\n    setElements((es) => es.concat(newNode));\n    setNewNode(() => newNode );\n    setWidgetType(() => type);\n    dispatch({\n        type: \"CREATE_OBJECT\",\n        payload: newNode.id,\n        \n      });\n  };\n\n  const onElementClick = (event, element) => {\n    \n    if(element?.data){\n      // const widgetType = element.data.label.split(\" \")[0];\n      \n      event.preventDefault();\n      setWidgetType(() =>  element.data.widgetType);\n      setNewNode(() => element);\n      setVisibleDrawer((previousVisible) => !previousVisible);\n      \n      // console.log();\n      dispatch({\n        type: \"CREATE_OBJECT\",\n        payload: element.id,\n        \n      });\n    }\n}\n\n  const onClose = () => {\n    setVisibleDrawer(previousVisible => !previousVisible);\n  };\n  \n\n  const updateNode = evt => {\n    // debugger\n    const { target } = evt;\n    const { value } = target;\n    const updatedNode = {...newNode, data: {label: value}};\n    setNewNode(() => updatedNode);\n  }\n\n  const widgets = {\n    'form': <FormWidget \n    newNode={newNode}\n    onHandleNode={updateNode}\n    onHandleDrawer={() => setVisibleDrawer(previousVisible => !previousVisible)}\n  />,\n  'dataSource': <DataSourceWidget\n    newNode={newNode}\n    onHandleNode={updateNode}\n    onHandleDrawer={() => setVisibleDrawer(previousVisible => !previousVisible)}/>,\n   'email': <EmailWidget /> \n  }\n\n  const onEdgeUpdate = (oldEdge, newConnection) => {\n    console.log(oldEdge, newConnection);\n    \n    // setElements((els) => updateEdge(oldEdge, newConnection, els));\n  }\n  \n\n\n  return (\n    \n    <div className=\"dndflow\">\n      <Sidebar />\n      \n      <ReactFlowProvider>\n        <div className=\"reactflow-wrapper\" ref={reactFlowWrapper}>\n         <ReactFlow\n    style={{position: 'absolute', width:'80%'}}\n      elements={elements}\n      // onElementClick={true ? onElementClick : undefined}\n      //onElementClick={onElementClick}\n      onElementsRemove={onElementsRemove}\n      onConnect={onConnect}\n      // onPaneClick={() => console.log('Panel Click')}\n      // onPaneScroll={() => console.log('Panel scroll')}\n      // onPaneContextMenu={() => console.log('Panel Context Menu')}\n      // onNodeDragStart={() => console.log('Drag Start')}\n      // onNodeDrag={() => console.log('Node Drag')}\n      // onNodeDragStop={() => console.log('Node Drag Stop')}\n      onNodeDoubleClick={onElementClick}\n      // onSelectionDragStart={() => console.log('Selection Drag Start')}\n      // onSelectionDrag={() => console.log('Selection Drag')}\n      // onSelectionDragStop={() => console.log('Selection Drag Stop')}\n      // onSelectionContextMenu={() => console.log('On Selection COntext menu')}\n      // onSelectionChange={() => console.log('On Selection Change')}\n      // onMoveEnd={() => console.log('Move end')}\n      onLoad={onLoad}\n      onDrop={onDrop}\n            onDragOver={onDragOver}\n      // connectionLineStyle={connectionLineStyle}\n      snapToGrid={true}\n      // snapGrid={snapGrid}\n      // onEdgeContextMenu={() => console.log('Edge Context Menu')}\n      // onEdgeMouseEnter={() => console.log('Edge Mouse enter')}\n      // onEdgeMouseMove={() => console.log('On Edge Mouse Move')}\n      // onEdgeMouseLeave={() => console.log('On Edge Mouse leave')}\n\n      \n     \n    >\n      {/* <MiniMap nodeStrokeColor={nodeStrokeColor} nodeColor={nodeColor} nodeBorderRadius={2} /> */}\n      <Controls />\n      <Background color=\"#aaa\" gap={20} size={1} />\n    </ReactFlow>\n        </div>\n        \n      </ReactFlowProvider>\n\n      <Drawer\n          title={`${widgetType} Widget`}\n          placement='right'\n          width={500}\n          closable={false}\n          onClose={onClose}\n          visible={visibleDrawer}\n          key={'right'}\n        >\n         \n          {widgets[widgetType]}\n          \n        </Drawer>\n     \n    </div>\n   \n   \n  );\n};\n\nexport default ReactFlowChart;\n\n\n\n\n\n\n\n// import React, { useState, MouseEvent, CSSProperties } from 'react';\n\n// import ReactFlow, {\n//   removeElements,\n//   addEdge,\n//   MiniMap,\n//   Controls,\n//   Background,\n//   isNode,\n//   Node,\n//   Elements,\n//   FlowElement,\n//   OnLoadParams,\n//   FlowTransform,\n//   SnapGrid,\n//   ArrowHeadType,\n//   Connection,\n//   Edge,\n// } from 'react-flow-renderer';\n\n// const onNodeDragStart = (node) => console.log('drag start', node);\n// const onNodeDrag = (node) => console.log('drag', node);\n// const onNodeDragStop = (node) => console.log('drag stop', node);\n// const onNodeDoubleClick = (node) => console.log('node double click', node);\n// const onPaneClick = (event ) => console.log('pane click', event);\n// const onPaneScroll = (event) => console.log('pane scroll', event);\n// const onPaneContextMenu = (event) => console.log('pane context menu', event);\n// const onSelectionDrag = (nodes) => console.log('selection drag', nodes);\n// const onSelectionDragStart = (nodes) => console.log('selection drag start', nodes);\n// const onSelectionDragStop = (nodes) => console.log('selection drag stop', nodes);\n// const onSelectionContextMenu = (event, nodes) => {\n//   event.preventDefault();\n//   console.log('selection context menu', nodes);\n// };\n// const onElementClick = (element) =>\n//   console.log(`${isNode(element) ? 'node' : 'edge'} click:`, element);\n// const onSelectionChange = (elements) => console.log('selection change', elements);\n// const onLoad = (reactFlowInstance) => {\n//   console.log('flow loaded:', reactFlowInstance);\n//   reactFlowInstance.fitView();\n// };\n\n// const onMoveEnd = (transform) => console.log('zoom/move end', transform);\n// const onEdgeContextMenu = (edge) => console.log('edge context menu', edge);\n// const onEdgeMouseEnter = (edge) => console.log('edge mouse enter', edge);\n// const onEdgeMouseMove = (edge) => console.log('edge mouse move', edge);\n// const onEdgeMouseLeave = (edge) => console.log('edge mouse leave', edge);\n// const onEdgeDoubleClick = (edge) => console.log('edge double click', edge);\n\n// const initialElements = [\n//   {\n//     id: '1',\n//     type: 'input',\n//     data: {\n//       label: (\n//         <>\n//           Welcome to <strong>React Flow!</strong>\n//         </>\n//       ),\n//     },\n//     position: { x: 250, y: 0 },\n//   },\n//   {\n//     id: '2',\n//     data: {\n//       label: (\n//         <>\n//           This is a <strong>default node</strong>\n//         </>\n//       ),\n//     },\n//     position: { x: 100, y: 100 },\n//   },\n//   {\n//     id: '3',\n//     data: {\n//       label: (\n//         <>\n//           This one has a <strong>custom style</strong>\n//         </>\n//       ),\n//     },\n//     position: { x: 400, y: 100 },\n//     style: { background: '#D6D5E6', color: '#333', border: '1px solid #222138', width: 180 },\n//   },\n//   {\n//     id: '4',\n//     position: { x: 250, y: 200 },\n//     data: {\n//       label: (\n//         <>\n//           You can find the docs on{' '}\n//           <a href=\"https://github.com/wbkd/react-flow\" target=\"_blank\" rel=\"noopener noreferrer\">\n//             Github\n//           </a>\n//         </>\n//       ),\n//     },\n//   },\n//   {\n//     id: '5',\n//     data: {\n//       label: (\n//         <>\n//           Or check out the other <strong>examples</strong>\n//         </>\n//       ),\n//     },\n//     position: { x: 250, y: 325 },\n//   },\n//   {\n//     id: '6',\n//     type: 'output',\n//     data: {\n//       label: (\n//         <>\n//           An <strong>output node</strong>\n//         </>\n//       ),\n//     },\n//     position: { x: 100, y: 480 },\n//   },\n//   { id: '7', type: 'output', data: { label: 'Another output node' }, position: { x: 400, y: 450 } },\n//   { id: 'e1-2', source: '1', target: '2', label: 'this is an edge label' },\n//   { id: 'e1-3', source: '1', target: '3' },\n//   { id: 'e3-4', source: '3', target: '4', animated: true, label: 'animated edge' },\n//   { id: 'e4-5', source: '4', target: '5', arrowHeadType: ArrowHeadType.Arrow, label: 'edge with arrow head' },\n//   { id: 'e5-6', source: '5', target: '6', type: 'smoothstep', label: 'smooth step edge' },\n//   {\n//     id: 'e5-7',\n//     source: '5',\n//     target: '7',\n//     type: 'step',\n//     style: { stroke: '#f6ab6c' },\n//     label: 'a step edge',\n//     animated: true,\n//     labelStyle: { fill: '#f6ab6c', fontWeight: 700 },\n//   },\n// ];\n\n// const connectionLineStyle: CSSProperties = { stroke: '#ddd' };\n// const snapGrid: SnapGrid = [16, 16];\n\n// const nodeStrokeColor = (n )=> {\n//   if (n.style?.background) return n.style.background;\n//   if (n.type === 'input') return '#0041d0';\n//   if (n.type === 'output') return '#ff0072';\n//   if (n.type === 'default') return '#1a192b';\n\n//   return '#eee';\n// };\n\n// const nodeColor = (n) => {\n//   if (n.style?.background) return n.style.background;\n\n//   return '#fff';\n// };\n\n// const ReactFlowChart = () => {\n//   const [elements, setElements] = useState(initialElements);\n//   const onElementsRemove = (elementsToRemove) => setElements((els) => removeElements(elementsToRemove, els));\n//   const onConnect = (params) => setElements((els) => addEdge(params, els));\n\n//   return (\n//     <ReactFlow\n//     style={{position: 'absolute', width:'80%'}}\n//       elements={elements}\n//       onElementClick={onElementClick}\n//       onElementsRemove={onElementsRemove}\n//       onConnect={onConnect}\n//       // onPaneClick={onPaneClick}\n//       // onPaneScroll={onPaneScroll}\n//       // onPaneContextMenu={onPaneContextMenu}\n//       // onNodeDragStart={onNodeDragStart}\n//       // onNodeDrag={onNodeDrag}\n//       // onNodeDragStop={onNodeDragStop}\n//       // onNodeDoubleClick={onNodeDoubleClick}\n//       // onSelectionDragStart={onSelectionDragStart}\n//       // onSelectionDrag={onSelectionDrag}\n//       // onSelectionDragStop={onSelectionDragStop}\n//       // onSelectionContextMenu={onSelectionContextMenu}\n//       // onSelectionChange={onSelectionChange}\n//       // onMoveEnd={onMoveEnd}\n//       // onLoad={onLoad}\n//       // connectionLineStyle={connectionLineStyle}\n//       // snapToGrid={true}\n//       // snapGrid={snapGrid}\n//       // onEdgeContextMenu={onEdgeContextMenu}\n//       // onEdgeMouseEnter={onEdgeMouseEnter}\n//       // onEdgeMouseMove={onEdgeMouseMove}\n//       // onEdgeMouseLeave={onEdgeMouseLeave}\n//       // onEdgeDoubleClick={onEdgeDoubleClick}\n//     >\n//       {/* <MiniMap nodeStrokeColor={nodeStrokeColor} nodeColor={nodeColor} nodeBorderRadius={2} /> */}\n//       <Controls />\n//       <Background color=\"#aaa\" gap={20} size={1} />\n//     </ReactFlow>\n//   );\n// };\n\n// export default ReactFlowChart;\n// // export default ReactFlowChart;","import React from 'react';\nimport { WidgetsProvider } from './WidgetsContext';\nimport  ReactFlowChart from './ReactFlow';\nimport \"antd/dist/antd.css\";\nimport './dnd.css';\n\n\n\nconst App = () => {\n  \n \n\n\n  return (\n    <WidgetsProvider>\n      <ReactFlowChart />\n    </WidgetsProvider>\n   \n  );\n};\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}