{"version":3,"sources":["WidgetsContext.js","Sidebar.js","Inputs.js","FormPreview.js","DatasourcePreview.js","PreviewForm.js","FormWidget.js","DataSourceWidget.js","EmailPreview.js","EmailWidget.js","ReactFlow.js","App.js","reportWebVitals.js","index.js"],"names":["WidgetsContext","createContext","WidgetsProvider","props","createData","state","payload","currentNode","createChildren","node_id","children","createParent","parent","addNewItem","removeData","newState","Object","keys","reduce","obj","key","field","React","useReducer","action","type","globalState","dispatch","Provider","value","Sidebar","onDragStart","event","nodeType","dataTransfer","setData","effectAllowed","className","draggable","inputField","Input","TextArea","placeholder","onChange","evt","TextField","CheckboxField","data","onHandleCheckbox","span","onHandleChange","target","map","elem","title","VALIDATE_FORM_MESSAGES_TEMPLATE","required","types","email","number","url","range","string","max","whitespace","FormPreview","layoutType","fields","useContext","getFieldsList","forEach","push","formItemLayout","labelCol","wrapperCol","buttonItemLayout","offset","inputs","inputPlaceholder","rules","name","layout","initialValues","remember","onFinish","values","console","log","onFinishFailed","errorInfo","validateMessages","Item","label","inputLabel","length","htmlType","DatasourcePreview","useState","visible","setVisible","columns","setColumns","dataSource","setDataSource","isLoading","setIsLoading","useForm","handleSubmit","control","reset","getApiUrl","slug_input","getData","apiUrl","pickFields","fetch","then","response","json","result","tableColumns","dataIndex","catch","e","onClick","style","margin","centered","onOk","onCancel","width","padding","onSubmit","as","color","background","borderColor","border","loading","Option","Select","PreviewForm","previewLayout","setPreviewLayout","d","FormWidget","newNode","onHandleNode","onHandleDrawer","register","errors","displayFields","setDisplayFields","formWidgetKey","inputValue","inputName","ref","previousDisplayFields","icon","PlusOutlined","defaultValue","memo","DataSourceWidget","setPickFields","formName","formFields","setFormFields","defaultValues","widgetType","isSelected","dataSourceData","size","indexOf","filteredItems","filter","item","EmailPreview","a","method","headers","body","JSON","stringify","rows","marginTop","EmailWidget","defaultChecked","form_data","emailSource","id","ReactFlowChart","setNewNode","setWidgetType","visibleDrawer","setVisibleDrawer","reactFlowWrapper","useRef","reactFlowInstance","setReactFlowInstance","elements","setElements","useEffect","els","el","updateNode","updatedNode","widgets","previousVisible","onConnect","params","addEdge","source","onElementsRemove","elementsToRemove","removeElements","onElementClick","element","preventDefault","onLoad","_reactFlowInstance","onDrop","reactFlowBounds","current","getBoundingClientRect","position","project","x","clientX","left","y","clientY","top","test","formType","es","concat","onDragOver","dropEffect","onEdgeUpdate","oldEdge","newConnection","placement","closable","onClose","App","ReactFlow","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.42b9b6e1.chunk.js","sourcesContent":["import React, {createContext} from 'react';\nexport const WidgetsContext = createContext();\n\nexport const WidgetsProvider = props => {\n    const initialState = {}\n\nconst reducer = (state, action) => {\n    const { payload } = action;\n    switch (action.type) {\n      case \"CREATE_OBJECT\":\n       return addNewItem(state, payload);\n      case \"CREATE_CHILDREN\":\n        return createChildren(state, payload.node_id, payload.children); \n        case \"CREATE_PARENT\":\n          return createParent(state, payload.node_id, payload.parent);   \n      case \"CREATE_DATA\": \n      return createData(state, payload);\n      case \"REMOVE_DATA\":\n      return removeData(state, payload);    \n      default:\n       return state;    \n  }};\n\n  const createData = (state, payload) => {\n    return {...state, [state.currentNode]: {...state[state.currentNode],  ...payload}};\n  }\n\n  const createChildren = (state, node_id, children) => {\n    // debugger;\n    let newState = {\n      ...state,\n      [node_id]: {\n        ...state[node_id],\n        children: {\n          ...state[node_id].children, ...{[children]: ''}\n        },\n       \n      }\n    }\n    return newState;\n  }\n  const createParent = (state, node_id, parent) => {\n    // debugger;\n    let newState = {\n      ...state,\n      [node_id]: {\n        ...state[node_id],\n        ...state[node_id].parent, parent}\n       \n      }\n    \n    return newState;\n  }\n\n  const addNewItem = (state, payload) => {\n      // debugger;\n    //   return {...state, [payload]: {}, currentNode: payload };\n      if(!state[payload]){\n        return {...state, [payload]: {children:null, parent:null}, currentNode: payload };\n      }\n      return {...state, currentNode: payload };\n    \n  }\n\n  const removeData = (state, payload) => {\n     \n    //  delete state[payload.currentNode][payload.field]; \n    const newState = Object.keys(state[payload.currentNode]).reduce((obj, key)=>{\n        if(key !== payload.field){\n         obj[key] = state[payload.currentNode][key] \n        }\n      return obj\n     },{})\n     return {...state, [state.currentNode]: {...newState}};\n  }\n  \n\n        const [globalState, dispatch] = React.useReducer(reducer, initialState);\n        \n    return(\n        <WidgetsContext.Provider value={[globalState, dispatch]}>\n            {props.children}\n        </WidgetsContext.Provider>\n    )\n}","import React from 'react';\n\nconst Sidebar=  () => {\n  const onDragStart = (event, nodeType) => {\n    event.dataTransfer.setData('application/reactflow', nodeType);\n    event.dataTransfer.effectAllowed = 'move';\n  };\n\n  return (\n    <aside>\n      <div className=\"description\">You can drag these nodes to the pane on the right.</div>\n      <div className=\"dndnode form\" onDragStart={(event) => onDragStart(event, 'form')} draggable>\n        Form Widget\n      </div>\n      <div className=\"dndnode dataSource\" onDragStart={(event) => onDragStart(event, 'dataSource')} draggable>\n        DataSource\n      </div>\n       <div className=\"dndnode output\" onDragStart={(event) => onDragStart(event, 'email')} draggable>\n        Email Widget\n      </div>\n    </aside>\n  );\n};\n\nexport default Sidebar;","import React from \"react\";\nimport { Input, Checkbox, Row, Col } from \"antd\";\n\nconst { TextArea } = Input;\n\n\nexport const inputField = (placeholder, onChange ) => {\n    return <Input placeholder={placeholder} onChange={(evt) => onChange()} />;\n};\n\n\nexport const TextField  =  (props) => {\n    return (\n     <Input {...props} />\n    );\n  };\n\n export const textArea = (props) => {\n     return (\n        <TextArea {...props} />\n     )\n } \n\n \n\n\n  export const CheckboxField  =  (props) => {\n     const { data, onHandleCheckbox, span } = {...props}; \n     \n     const onHandleChange = (evt) => {\n        const { target } = evt; \n        const { value } = target;\n        onHandleCheckbox(value);\n     } \n    return (\n        <div>\n  {data.map((elem) => (\n            <Row>\n                <Col span={span || 8}>\n                 <Checkbox value={elem.value} onChange={onHandleChange}>{elem.title}</Checkbox>\n                </Col>\n            </Row>\n            ))}\n        </div>\n          \n\n\n    );\n  };  \n\n  export const CheckboxFieldObject  =  (props) => {\n    const { data, onHandleCheckbox, span } = {...props}; \n    \n    const onHandleChange = (elem) => {\n       onHandleCheckbox(elem);\n    } \n   return (\n       <div>\n {data.map((elem) => (\n           <Row>\n               <Col span={span || 8}>\n                <Checkbox value={elem.value} defaultChecked={elem.defaultChecked} onChange={() => onHandleChange(elem)}>{elem.title}</Checkbox>\n               </Col>\n           </Row>\n           ))}\n       </div>\n         \n\n\n   );\n };  ","/* eslint-disable no-template-curly-in-string */\nimport { useContext, useEffect, useState } from 'react';\nimport { TextField } from \"./Inputs\";\nimport { Form, Input, Button, Checkbox } from 'antd';\nimport { WidgetsContext } from './WidgetsContext';\n// const layout = {\n//   labelCol: {\n//     span: 4,\n//   },\n//   wrapperCol: {\n//     span: 16,\n//   },\n// };\n// const tailLayout = {\n//   wrapperCol: {\n//     offset: 4,\n//     span: 16,\n//   },\n// };\n\nconst VALIDATE_FORM_MESSAGES_TEMPLATE = {\n  required: \"${label} is required!\",\n  types: {\n    email: 'Enter a valid email!',\n    number: \"${label} is not a validate number!\",\n    url: \"${label} is not a valid url!\",\n  },\n  number: {\n    range: \"${label} must be between ${min} and ${max}\",\n  },\n  string: {\n    max: \"Character count cannot exceed ${max}\",\n  },\n  whitespace: \"${label} cannot be empty!\",\n};\n  \n\nconst FormPreview = (props) => {\n  \n  const { fields, layoutType } = {...props}; \n  \n  const [globalState, dispatch] = useContext(WidgetsContext); \n  \n  // useEffect(()=>{\n  //   debugger;\n  //   const keys = currentNode && Object.keys(globalState[currentNode]); \n  //   globalState[currentNode] && keys.forEach((elem) => {\n  //     setFormFields([...formFields, globalState[currentNode][elem]]);\n  //   });\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  // },[globalState[currentNode]])\n\n  const getFieldsList = () => {\n    const fields = [];\n    const { currentNode } = globalState;\n    const keys = currentNode && Object.keys(globalState[currentNode]); \n    globalState[currentNode] && keys.forEach((elem) => {fields.push(globalState[currentNode][elem])});\n    return fields; \n  }\n  const formItemLayout =\n    layoutType === 'horizontal'\n      ? {\n          labelCol: { span: 4 },\n          wrapperCol: { span: 14 },\n        }\n      : null;\n\n  const buttonItemLayout =\n  layoutType === 'horizontal'\n      ? {\n          wrapperCol: { span: 14, offset: 4 },\n        }\n      : null; \n  \n  const onFinish = (values) => {\n    console.log('Success:', values);\n  };\n\n  const onFinishFailed = (errorInfo) => {\n    console.log('Failed:', errorInfo);\n  };\n\n    const inputs = {\n    'text':  (elem) => {\n        return <TextField placeholder={elem?.inputPlaceholder || ''} type={elem.type} rules={[]}\n        />\n     },\n     'email':  (elem) => {\n        return <TextField  placeholder={elem?.inputPlaceholder || ''} type={elem.type} rules={[{ type: \"email\" }]}\n        />\n     },\n     'number':  (elem) => {\n      return <TextField placeholder={elem?.inputPlaceholder || ''} type={elem.type} rules={[{ type: \"number\" }]}\n      />\n   }\n    }\n\n  \n  return (\n    <Form\n      {...formItemLayout}\n      name=\"basic\"\n      layout={layoutType}\n      initialValues={{\n        remember: true,\n      }}\n      onFinish={onFinish}\n      onFinishFailed={onFinishFailed}\n      validateMessages={VALIDATE_FORM_MESSAGES_TEMPLATE}\n    >\n\n                {\n                    getFieldsList().map((elem) => (\n                        <>\n                            \n                         \n\n      <Form.Item\n        label={elem.inputLabel}\n        name={elem.name}\n        >\n        {inputs[elem.type](elem)}\n      </Form.Item>\n\n                          \n                            \n                        </>\n                       \n                    ))\n                }\n\n\n      \n\n      \n\n      {getFieldsList().length > 0 && <Form.Item {...buttonItemLayout}>\n        <Button type=\"primary\" htmlType=\"submit\">\n          Submit\n        </Button>\n      </Form.Item> }\n\n      \n\n     \n\n     \n    </Form>\n  );\n};\n\n\nexport default FormPreview;","import { useState, useContext, useEffect  } from 'react';\nimport { WidgetsContext } from './WidgetsContext';\nimport { Modal, Button, Table, Row, Col, Spin } from 'antd';\nimport { TextField } from \"./Inputs\";\n\nimport { useForm, Controller } from \"react-hook-form\";\n\n\n\nconst DatasourcePreview =  (props) => {\n    const [globalState] = useContext(WidgetsContext); \n    const { currentNode } = globalState;\n    const [visible, setVisible] = useState(false);\n    const [columns, setColumns] = useState([]);\n    const [dataSource, setDataSource] = useState([]);\n    const [isLoading, setIsLoading] = useState(false);\n   \n   \n    \n    const { handleSubmit, reset, control } = useForm();\n    const getApiUrl = (slug_input, url) => slug_input ? `${url}/${slug_input}` : url; \n    const getDataSource = () => {\n        const {slug_input, url, pickFields} = globalState[currentNode];\n        const apiUrl = getApiUrl(slug_input, url);\n        setIsLoading(true);\n        getData(apiUrl, pickFields);\n      }\n\n    const onSubmit = data => { \n      const {url, pickFields} = globalState[currentNode];\n      const { slug_input } = data;\n      const apiUrl = getApiUrl(slug_input, url);\n      setIsLoading(true);\n      getData(apiUrl, pickFields);\n      // reset();\n  };\n\n  const getData = (apiUrl, pickFields) => {\n    fetch(apiUrl)\n        .then(response => response.json())\n        .then(result => {\n           const tableColumns = pickFields.map((elem) => ({title:elem, dataIndex: elem, key: elem}));\n           setColumns(tableColumns);\n           setDataSource([result]);\n           setVisible(true)\n           setIsLoading(false);\n        })\n        .catch(e => {\n            console.log(e);\n            setVisible(false)\n        });\n  }\n    \n\n   \n   \n \n    \n   \n  return (\n    <div>\n     \n       <Button type=\"primary\" onClick={getDataSource} style={{margin: '10px'}}>\n        Preview Data Source\n      </Button>\n      <Modal\n        title=\"Data Source\"\n        centered\n        visible={visible}\n        onOk={() => setVisible(false)}\n        onCancel={() => setVisible(false)}\n        width={600}\n      >\n         <div style={{padding: \"10px\"}}>\n              \n            <form onSubmit={handleSubmit(onSubmit)}>\n            <Row>\n              <Col span={20}>\n              <Controller\n               as={<TextField placeholder='Enter id.....' />}\n               control={control}\n               rules={{ required: true }}\n               name=\"slug_input\"\n               style={{padding: '10px', margin: '10px'}}\n               />\n              </Col>\n              <Col span={4}>\n                 <input type=\"submit\"  style={{\n                   padding: '10px', \n                   margin: '10px', \n                   color: '#fff',\n                   background: '#1890ff',\n                   borderColor: '#1890ff',\n                   border: '1px solid #1890ff'}}/>\n              </Col>\n            </Row>\n            \n             </form>\n                 \n            </div>\n         { !isLoading && <Table dataSource={dataSource} columns={columns} loading={isLoading}/> }\n         {/* <Spin size=\"large\" /> */}\n         {/* {isLoading.toString()} */}\n      </Modal>\n    </div>\n    \n  );\n};\n\nexport default DatasourcePreview;\n\n","import React, { useState, useContext, useEffect } from 'react';\n\nimport FormPreview from './FormPreview';\nimport DatasourcePreview from './DatasourcePreview';\nimport { WidgetsContext } from './WidgetsContext';\n\nimport { Modal, Button, Row, Col, Select } from 'antd';\nconst { Option } = Select;\n\nconst PreviewForm = (props) => {\n  const [globalState, dispatch] = useContext(WidgetsContext); \n  const [previewLayout, setPreviewLayout] = useState(''); \n  // console.log(globalState);\n  const [fields, setFormFields] = useState([]);\n  const [visible, setVisible] = useState(false);\n  const layoutType = [\n    { value: \"vertical\", label: \"Vertical\" },\n    { value: \"horizontal\", label: \"Horizontal\" },\n    { value: \"inline\", label: \"Inline\" },\n  ];\n\n\n\n\n \n\n  const updateFormFields = () => {\n    // const { currentNode } = globalState;\n    // const keys = currentNode && Object.keys(globalState[currentNode]); \n    \n    // globalState[currentNode] && keys.forEach((elem) => {\n    //   fields.push(globalState[currentNode][elem]);\n    //   setFormFields(fields);\n    //   console.log(fields);\n    //     // setFormFields([...fields, globalState[currentNode][elem]]);\n    // });\n    setVisible(true) \n    // dispatch({ type: \"CREATE_LAYOUT\", payload: {layoutType : previewLayout} });\n  }\n\n  const onHandleLayoutChange = (evt) => {\n    setPreviewLayout(evt);\n  }\n  \n\n    \n  return (\n    <>\n\n      <Row>\n      <Col span={8}>\n      <Button type=\"primary\" onClick={updateFormFields} style={{margin: \"10px\"}}>\n        Preview Form\n      </Button>\n      </Col>\n      <Col span={16}>\n        <Row style={{margin:\"10px\"}}>\n          <Col span={8}>\n            <label>Layout Type</label> \n          </Col>\n          <Col span={15}>\n          <Select style={{width: '100%'}} onChange={onHandleLayoutChange} placeholder=\"Choose Layout Type\">\n                {layoutType.map(d => {\n                  return (\n                    <Option key={d.value} value={d.value} >\n                      {d.label}\n                    </Option>\n                  );\n                })}\n        </Select>\n          </Col>\n        </Row>\n       \n     \n      </Col>\n    </Row>\n     \n      <Modal\n        title=\"Form\"\n        centered\n        visible={visible}\n        onOk={() => setVisible(false)}\n        onCancel={() => setVisible(false)}\n        width={1000}\n      >\n         \n         <FormPreview fields={fields} layoutType={previewLayout}/>\n\n       \n      </Modal>\n    </>\n  );\n};\n\nexport default PreviewForm;\n","import React, {useState, useContext, useEffect, memo} from 'react';\n\nimport PreviewForm  from './PreviewForm';\n\nimport { Input, Button, Select, Row, Col, List, Skeleton } from \"antd\";\nimport { PlusOutlined } from '@ant-design/icons';\nimport { useForm, Controller } from \"react-hook-form\";\nimport { WidgetsContext } from './WidgetsContext';\nimport { inputField } from \"./Inputs\";\nconst { Option } = Select;\n\nconst FormWidget =  (props) => {\n  const [globalState, dispatch] = useContext(WidgetsContext);\n  const { currentNode } = globalState;\n  // const [fields, setFormFields] = useState([]);\n  const { newNode, onHandleNode, onHandleDrawer } = {...props};  \n  const { handleSubmit, register, errors, control, reset } = useForm();\n  const [displayFields, setDisplayFields] = useState(true);\n  \n  const onSubmit = data => { \n      if(Object.keys(data).length > 0){\n        const field = Object.keys(globalState[currentNode]).length + 1;\n      const formWidgetKey = {[`field${field}`]: {...data, 'field': `field${field}`}};\n      dispatch({ type: \"CREATE_DATA\", payload: formWidgetKey });\n      reset({\n        type: '',\n        inputLabel: '', \n        inputValue: '', \n        inputPlaceholder:'',\n        inputName: ''\n      });\n      }\n      \n      \n  };\n\n  const types = [\n    { value: \"text\", label: \"Text\" },\n    { value: \"email\", label: \"Email\" },\n    { value: \"number\", label: \"Number\" }\n  ];\n  let fields = [];\n  const getFieldsList = () => {\n    \n    const { currentNode } = globalState;\n    const keys = currentNode && Object.keys(globalState[currentNode]); \n    globalState[currentNode] && keys.forEach((elem) => {\n      fields.push(globalState[currentNode][elem])\n    });\n    return fields; \n  }\n \n\n  const editField = (index) => {\n    // console.log('Edit');\n    const { type, inputLabel, inputValue, inputPlaceholder, inputName } = fields[index];\n    reset({\n      type, inputLabel, inputValue, inputPlaceholder, inputName\n\n    });\n  }\n\n  \n \n  const deleteField = (index) => {\n    const { currentNode } = globalState;\n    const field = fields[index].field;\n    dispatch({ type: \"REMOVE_DATA\", payload: {field:field, currentNode: currentNode }});\n    getFieldsList(); \n  }\n \n    \n   \n  return (\n    <div>\n      <PreviewForm />\n      <form onSubmit={handleSubmit(onSubmit)}>\n            <div style={{padding: \"10px\"}}>\n              \n              <Input placeholder=\"Form Name\" ref={register} value={newNode?.data?.label} onChange={(evt) => onHandleNode(evt)}/>\n            </div>\n            <Button\n                type=\"dashed\"\n                onClick={() => setDisplayFields(previousDisplayFields => !previousDisplayFields)}\n                style={{ width: '95%', margin: '10px'}}\n                icon={<PlusOutlined />}\n              >\n                Add field\n              </Button>\n            \n            {!displayFields && \n            <div style={{padding: \"10px\"}}>\n            <section>\n              <Row>\n                <Col span={24}>\n                <label>Select Type</label>\n                <Controller\n               \n               as={\n               <Select style={{width: '100%'}} placeholder=\"Choose Field Type\">\n                {types.map(d => {\n                  return (\n                    <Option key={d.value} value={d.value} >\n                      {d.label}\n                    </Option>\n                  );\n                })}\n              </Select>}\n               control={control}\n               rules={{ required: true }}\n               name=\"type\"/>\n                </Col>\n              </Row>\n              \n               {errors.type && (\n\t\t\t\t\t        <span className='error'>This field is required</span>\n\t\t\t\t        )}\n               <Row>\n                <Col span={24}>\n                <label>Input Label</label>\n                <Controller\n               as={inputField(\"Input Label\")}\n               control={control}\n               ref={register({ required: true, value: 'test' })}\n              //  defaultValue=\"inputLabel\"\n               rules={{ required: true }}\n               defaultValue=''\n               name=\"inputLabel\"/>\n                </Col>   \n              </Row> \n              <Row>\n                <Col span={24}>\n                <label>Input Placeholder</label>\n                <Controller\n               placeholder=\"Input Placeholder\"\n               defaultValue=''\n               as={inputField(\"Input Placeholder\")}\n               ref={register({ required: true })}\n               rules={{ required: true }}\n               control={control}\n               name=\"inputPlaceholder\"/>\n                </Col>\n              </Row>\n              {/* <Row>\n                <Col span={24}>\n                <label>Input Name</label>\n                <Controller\n               placeholder=\"Input Name\"\n               as={inputField(\"Input Name\")}\n               ref={register({ required: true })}\n               rules={{ required: true }}\n               control={control}\n               name=\"inputName\"/>\n                </Col>\n              </Row> */}\n              <Row>\n                <Col span={24}>\n                <label>Input Value</label>\n                <Controller\n               placeholder=\"Input Value\"\n               as={inputField(\"Input Value\")}\n               defaultValue=''\n               ref={register({ required: true })}\n               rules={{ required: true }}\n               control={control}\n               name=\"inputValue\"/>\n                </Col>\n              </Row>\n              \n              \n               \n            </section>\n           \n          </div> }\n          <div style={{padding: \"10px\"}}>\n            <input type=\"submit\" style={{width: '50%'}}/>\n            <Button onClick={onHandleDrawer} style={{width: '50%'}}>Cancel</Button>\n          </div>\n          {/* <List\n          header={<div>Form Fields</div>}\n          bordered\n          dataSource={getFieldsList()}\n          renderItem={(item, index) => (\n        <>\n           <List.Item\n          //  onClick={() => editField(index)}\n          // <a key=\"list-loadmore-edit\" >edit</a>\n            actions={[<a key=\"list-loadmore-more\" onClick={() => deleteField(index)}>delete</a>]}\n          >\n            <Skeleton loading={item.loading} active>\n            <List.Item.Meta\n               \n                title={<h4>Type: {item.type}</h4>}\n                \n              />\n            </Skeleton>\n          </List.Item>\n        </>\n       \n      )}\n    /> */}\n    </form>\n    </div>\n    \n  );\n};\n\nexport default memo(FormWidget);","import React, {  useState, useContext, memo } from 'react';\nimport { useForm, Controller } from \"react-hook-form\";\nimport { Button, Table, Input, Row, Col, Spin } from \"antd\";\nimport { WidgetsContext } from './WidgetsContext';\nimport { inputField, CheckboxField } from \"./Inputs\";\nimport DatasourcePreview from \"./DatasourcePreview\";\n\nconst DataSourceWidget =  (props) => {\n  const [globalState, dispatch] = useContext(WidgetsContext);\n  const { currentNode } = globalState;\n  const { newNode, onHandleNode, onHandleDrawer } = {...props};  \n  const [columns, setColumns] = useState([]);\n  const [pickFields, setPickFields] = useState([]);\n  const [dataSource, setDataSource] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  \n  const formName = 'form_dataSource_1';\n  const [formFields, setFormFields] = useState({[formName]: {}});\n  const { handleSubmit, register, control } = useForm({\n    defaultValues: {\n        slug_input: '',\n        url: 'https://jsonplaceholder.typicode.com/todos'\n    }\n  });\n\n\n  \n  const getApiUrl = (slug_input, url) => slug_input ? `${url}/${slug_input}` : url; \n\n  const onSubmit = data => {\n    setIsLoading(true);\n    setDataSource([]);\n    \n    const { slug_input, url } = data;\n    const apiUrl = getApiUrl(slug_input, url);\n    fetch(apiUrl)\n    .then(response => response.json())\n    .then(result => {\n       setIsLoading(false);\n       const columns = Object.keys(result)\n       const tableColumns = columns.map((elem) => ({title:elem, value:elem, dataIndex: elem, key: elem, isSelected: false}));\n       \n      \n       const dataSourceData = {...data, columns, style:{}};\n       dispatch({ type: \"CREATE_DATA\", payload: dataSourceData });\n       setFormFields({...formFields, [formName]: dataSourceData})\n       setColumns(tableColumns);\n       setDataSource([result]);\n       \n    })\n    .catch(e => {\n        console.log(e);\n        setIsLoading(false);\n    });\n  }\n\n  const onHandleCheckbox = (value) => {\n    // let filteredItems;\n    let dataSource;\n    const pickFieldIndex = pickFields.indexOf(value);\n    if(pickFieldIndex === -1){\n      setPickFields([...pickFields, value]);\n      dataSource = {pickFields: [...pickFields, value] };\n     \n    }\n    else{\n      const filteredItems = pickFields.filter(function(item) {\n        return item !== value\n      })\n      setPickFields(filteredItems);\n      dataSource = {pickFields: filteredItems};\n    }\n    dispatch({ type: \"CREATE_DATA\", payload: {pickFields :dataSource.pickFields} });\n    \n   \n  \n     \n  }\n\n  return (\n      <div>\n         <DatasourcePreview widgetType='datasource' />\n         <Input style={{padding: '10px', margin: '10px'}} placeholder=\"Form Name\" ref={register} value={newNode?.data?.label} onChange={(evt) => onHandleNode(evt)}/> \n        <form onSubmit={handleSubmit(onSubmit)}>\n        <div>\n            <section>\n              <label>Data Source</label>\n              <Controller\n               as={inputField(\"slug_input\")}\n               control={control}\n               rules={{ required: true }}\n               name=\"slug_input\"\n               style={{padding: '10px', margin: '10px'}}\n               />\n               <Controller\n               as={inputField(\"Url\")}\n               control={control}\n               rules={{ required: true }}\n               name=\"url\"\n               style={{padding: '10px', margin: '10px'}}\n               />\n            </section>\n        </div> \n          <div style={{padding: '10px', margin: '10px'}}>\n            <input type=\"submit\" style={{width: '50%'}}/>\n            <Button onClick={onHandleDrawer} style={{width: '50%'}}>Cancel</Button>\n            \n          </div>\n          <div >\n            {isLoading && <Spin size=\"large\" style={{width: '100%'}} />}\n          </div>\n\n          </form>\n          {/* { !isLoading && <Table dataSource={dataSource} columns={columns} /> } */}\n\n          <Row>\n            <Col>\n              <h4>Pick Fields</h4>\n              <CheckboxField data={columns} onHandleCheckbox={onHandleCheckbox}/>\n            </Col>\n           \n            \n            {/* {dataSource.length > 0 && formFields[formName]} */}\n          </Row>\n         \n          \n        \n      </div>\n    \n\n\n  \n  \n  );\n};\n\nexport default memo(DataSourceWidget);","import { useState, useContext, useEffect  } from 'react';\nimport { WidgetsContext } from './WidgetsContext';\nimport { Modal, Button, Table, Row, Col, Spin } from 'antd';\nimport { TextField } from \"./Inputs\";\n\nimport { useForm, Controller } from \"react-hook-form\";\n\n\n\nconst EmailPreview =  (props) => {\n    const [globalState] = useContext(WidgetsContext); \n    const { currentNode } = globalState;\n    const [visible, setVisible] = useState(false);\n    // console.log(globalState[currentNode]);\n    \n   \n   \n    \n    const { handleSubmit, register, errors, control, reset } = useForm();\n    const onSubmit = async (data) => { \n    //   http://localhost:3000/mail/sendEmail\n      try{\n          const response = await fetch('https://onsalon.herokuapp.com/mail/sendEmail', {\n              method: 'post',\n              headers: {\n                  'Accept': 'application/json',\n                  'Content-Type': 'application/json'\n                },\n              body: JSON.stringify(data)\n            });\n          \n      }\n      catch(e){\n          console.log(e);\n      }\n    };\n\n    const onHandleEmailPreview = () => {\n        setVisible(true);\n    }\n\n \n    const inputs = {\n        'text':  (elem) => {\n            return <TextField placeholder={elem?.inputPlaceholder || ''} type={elem.type} rules={[]}\n            />\n         },\n         'email':  (elem) => {\n            return <TextField  placeholder={elem?.inputPlaceholder || ''} type={elem.type} rules={[{ type: \"email\" }]}\n            />\n         },\n         'password':  (elem) => {\n          return <TextField placeholder={elem?.inputPlaceholder || ''} type={elem.type} rules={[{ type: \"password\" }]}\n          />\n       }\n        }\n    \n\n   \n   \n \n    \n   \n  return (\n    <div>\n     \n       <Button type=\"primary\" onClick={onHandleEmailPreview} style={{margin: '10px'}}>\n        Preview Email \n      </Button>\n      <Modal\n        title=\"Data Source\"\n        centered\n        visible={visible}\n        onOk={() => setVisible(false)}\n        onCancel={() => setVisible(false)}\n        width={600}\n      >\n         <div style={{padding: \"10px\"}}>\n              \n           <form onSubmit={handleSubmit(onSubmit)}>\n           <div style={{padding: \"10px\"}}>\n            <section>\n              {/* {\n                globalState && \n                globalState[currentNode] && \n                globalState[currentNode].emailSource?.length > 0 &&\n                globalState[currentNode]?.emailSource.map((elem) => (\n                <Row>\n                <Col span={24}>\n                <label>{elem.title}</label>\n                <Controller\n                as={inputs[elem.type](elem)}\n                control={control}\n                defaultValue=''\n                rules={{ required: true }}\n                name={elem.value}/>\n                </Col>   \n              </Row>\n\n                )) \n                //  globalState[currentNode]?.emailSource.length\n                }   */}\n              <Row>\n                <Col span={24}>\n                <label>Receiver Email</label>\n                <Controller\n                as={<TextField placeholder='Enter receiver email' type='email' rules={[]}/>}\n                control={control}\n                rules={{ required: true }}\n                defaultValue=''\n                name=\"to\"/>\n                </Col>   \n              </Row> \n              <Row>\n                <Col span={24}>\n                <label>Subject</label>\n                <Controller\n                as={<TextField placeholder='Subject...' type='text' rules={[]}/>}\n                control={control}\n                rules={{ required: true }}\n                defaultValue=''\n                name=\"subject\"/>\n                </Col>   \n              </Row> \n              <Row>\n                <Col span={24}>\n              \n                <Controller\n                placeholder=\"Content\"\n                defaultValue=''\n                as={<textArea rows={4}  style={{width: '100%', padding: '5px', marginTop: '10px'}}/>}\n                ref={register({ required: true })}\n                rules={{ required: true }}\n                control={control}\n                name=\"content\"/>\n                </Col>\n              </Row>\n              <div style={{padding: \"10px\"}}>\n            <input type=\"submit\" style={{width: '50%'}}/>\n      \n          </div>\n              \n              \n               \n            </section>\n           \n          </div> \n           </form>\n                 \n            </div>\n         \n         {/* <Spin size=\"large\" /> */}\n         {/* {isLoading.toString()} */}\n      </Modal>\n    </div>\n    \n  );\n};\n\nexport default EmailPreview;\n\n","import React, {useState, useContext, useEffect, memo} from 'react';\n\nimport EmailPreview  from './EmailPreview';\n\nimport { Input, Button, Select, Row, Col, List, Skeleton } from \"antd\";\nimport { PlusOutlined } from '@ant-design/icons';\nimport { useForm, Controller } from \"react-hook-form\";\nimport { WidgetsContext } from './WidgetsContext';\nimport { TextField, textArea, CheckboxFieldObject } from \"./Inputs\";\nconst { Option } = Select;\n\nconst EmailWidget =  (props) => {\n  const emailFields_ = [\n   {value: 'endpoint', title: 'End Point', type: 'text', inputPlaceholder: 'Enter Server End Point....', defaultChecked: false},\n   {value: 'email', title: 'Email', type: 'email', inputPlaceholder: 'Enter Email....', defaultChecked: false}, \n   {value: 'password', title: 'Password', type: 'password', inputPlaceholder: 'Enter Password....', defaultChecked: false}\n]  \n  const [globalState, dispatch] = useContext(WidgetsContext);\n  const [emailFields, setEmailFields] = useState(emailFields_);\n  const [fields, setFields] = useState([]);\n  \n  const { currentNode } = globalState;\n  const { onHandleDrawer } = {...props};  \n  const { handleSubmit, register, errors, control, reset } = useForm();\n \n//   useEffect(()=>{\n//     if(globalState[currentNode] && Object.keys(globalState[currentNode]).length === 0){\n//         setEmailFields([]);\n//     }\n//   },[currentNode])\n \n  const onHandleCheckbox = (elem) => {\n       \n        let emailData;\n        const { value } = elem; \n        const pickFieldIndex = fields.filter(function(item) {\n            return item.value === value\n          });\n        if(pickFieldIndex.length === 0){\n            setFields([...fields, elem]);\n            emailData = {fields: [...fields, elem] };\n     \n    }\n    else{\n      const filteredItems = fields.filter(function(item) {\n        return item.value !== value\n      })\n      debugger;\n      setFields(filteredItems);\n            emailData = {fields: filteredItems};\n    }\n    \n    dispatch({ type: \"CREATE_DATA\", payload: {emailSource :emailData.fields} });\n  }\n  \n \n\n  const onSubmit = (form_data) => {\n    let emailData = {fields: form_data};\n    dispatch({ type: \"CREATE_DATA\", payload: {emailSource :emailData.fields} });\n  }\n\n  \n \n  \n \n    \n   \n  return (\n    <div>\n        <Row>\n            <Col>\n             \n              <EmailPreview widgetType='email' />\n            </Col>\n\n        </Row>\n        <Row>\n        <Col span={22}>\n                 <h4>Server Fields</h4>\n                 <form onSubmit={handleSubmit(onSubmit)}>\n                    <Row>\n                        <Col span={24}>\n                        <Controller\n                        as={<TextField placeholder='Enter url.....' type=\"text\"/>}\n                        control={control}\n                        rules={{ required: true }}\n                        name=\"server_url\"\n                        style={{padding: '10px', margin: '10px'}}\n                    />\n                    </Col>\n                    </Row>\n                    <Row>\n                        <Col span={24}>\n                        <Controller\n                        as={<TextField placeholder='Enter email.....' type=\"email\"/>}\n                        control={control}\n                        rules={{ required: true }}\n                        name=\"server_email\"\n                        style={{padding: '10px', margin: '10px'}}\n                    />\n                    </Col>\n                    </Row>\n                    <Row>\n                        <Col span={24}>\n                        <Controller\n                        as={<TextField placeholder='Enter password.....' type=\"password\"/>}\n                        control={control}\n                        rules={{ required: true }}\n                        name=\"server_password\"\n                        style={{padding: '10px', margin: '10px'}}\n                    />\n                    </Col>\n                    </Row>\n\n                     <Col span={4}>\n                     <input type=\"submit\"  style={{\n                   padding: '10px', \n                   margin: '10px', \n                   color: '#fff',\n                   background: '#1890ff',\n                   borderColor: '#1890ff',\n                   border: '1px solid #1890ff'}}/>\n                     </Col>\n        </form>\n                 {/* <CheckboxFieldObject data={emailFields} onHandleCheckbox={onHandleCheckbox} span={24}/> */}\n                 {/* {JSON.stringify(globalState[currentNode])} */}\n            </Col>\n        </Row>\n      \n    </div>\n    \n  );\n};\n\nexport default EmailWidget;","import React, { useState, useRef, useEffect, useContext } from 'react';\nimport ReactFlow, {\n  ReactFlowProvider,\n  addEdge,\n  removeElements,\n  Controls,\n} from 'react-flow-renderer';\nimport { WidgetsContext } from './WidgetsContext';\n\n\n\nimport Sidebar from './Sidebar';\nimport FormWidget from './FormWidget';\nimport DataSourceWidget from './DataSourceWidget';\nimport EmailWidget from './EmailWidget';\n\nimport { Drawer } from \"antd\";\nimport './dnd.css';\n\n\n\nlet id = 0;\nconst getId = () => `dndnode_${id++}`;\n// let parentNodes = ;\nconst ReactFlowChart = () => {\n \n  const [globalState, dispatch] = useContext(WidgetsContext);\n  const [newNode, setNewNode] = useState({});\n  const [widgetType, setWidgetType] = useState('Form');\n  const [visibleDrawer, setVisibleDrawer] = useState(false);\n  const reactFlowWrapper = useRef(null);\n  const [reactFlowInstance, setReactFlowInstance] = useState(null);\n  const [elements, setElements] = useState([]);\n  const onConnect = (params) => {\n\n    // console.log(globalState);\n\n    // let parentNodes = JSON.parse(localStorage.getItem('parentNodes'));\n    // let childNodes = JSON.parse(localStorage.getItem('childNodes'));\n    // let parentNode = {...parentNodes,[params.source]: {...parentNodes[params.source], [params.target]:'' }};\n    // localStorage.setItem('parentNodes',JSON.stringify(parentNode));\n    // let childNode = {...childNodes,[params.target]: {...parentNodes[params.target], parent: params.source }};\n    // localStorage.setItem('childNodes',JSON.stringify(childNode));\n    setElements((els) => addEdge(params, els));\n    dispatch({\n      type: \"CREATE_CHILDREN\",\n      payload: {node_id: params.source, children:params.target},\n      \n    });\n    dispatch({\n      type: \"CREATE_PARENT\",\n      payload: {node_id: params.target, parent:params.source},\n      \n    });\n  };\n  useEffect(() => {\n    setElements((els) =>\n      els.map((el) => {\n        if (el.id === newNode.id) {\n         el.data = {\n            ...el.data,\n            label: newNode.data.label,\n          };\n        }\n      return el;\n      })\n    );\n  }, [newNode, setElements]);\n  const onElementsRemove = (elementsToRemove) =>\n    setElements((els) => removeElements(elementsToRemove, els));\n  const onLoad = (_reactFlowInstance) =>\n    setReactFlowInstance(_reactFlowInstance);\n  const onDragOver = (event) => {\n    event.preventDefault();\n    event.dataTransfer.dropEffect = 'move';\n  };\n\n  const onDrop = (event) => {\n    event.preventDefault();\n    const reactFlowBounds = reactFlowWrapper.current.getBoundingClientRect();\n    const type = event.dataTransfer.getData('application/reactflow');\n    // setWidgetType(() => type);\n    const position = reactFlowInstance.project({\n      x: event.clientX - reactFlowBounds.left,\n      y: event.clientY - reactFlowBounds.top,\n    });\n    const newNode = {\n      id: getId(),\n      type: 'default',\n      test: 'asd',\n      position,\n      data: { label: `${type} Widget`, widgetType: type},\n      style: {\n        background: '#D6D5E6',\n        color: '#333',\n        border: '1px solid #222138',\n        width: 180,\n        padding: 10\n      },\n      formType: type\n    };\n    setElements((es) => es.concat(newNode));\n    setNewNode(() => newNode );\n    setWidgetType(() => type);\n    dispatch({\n        type: \"CREATE_OBJECT\",\n        payload: newNode.id,\n        \n      });\n  };\n\n  const onElementClick = (event, element) => {\n    debugger;\n    if(element?.data){\n      // const widgetType = element.data.label.split(\" \")[0];\n      \n      event.preventDefault();\n      setWidgetType(() =>  element.data.widgetType);\n      setNewNode(() => element);\n      setVisibleDrawer((previousVisible) => !previousVisible);\n      \n      // console.log();\n      dispatch({\n        type: \"CREATE_OBJECT\",\n        payload: element.id,\n        \n      });\n    }\n}\n\n  const onClose = () => {\n    setVisibleDrawer(previousVisible => !previousVisible);\n  };\n  \n\n  const updateNode = evt => {\n    // debugger\n    const { target } = evt;\n    const { value } = target;\n    const updatedNode = {...newNode, data: {label: value}};\n    setNewNode(() => updatedNode);\n  }\n\n  const widgets = {\n    'form': <FormWidget \n    newNode={newNode}\n    onHandleNode={updateNode}\n    onHandleDrawer={() => setVisibleDrawer(previousVisible => !previousVisible)}\n  />,\n  'dataSource': <DataSourceWidget\n    newNode={newNode}\n    onHandleNode={updateNode}\n    onHandleDrawer={() => setVisibleDrawer(previousVisible => !previousVisible)}/>,\n   'email': <EmailWidget /> \n  }\n\n  const onEdgeUpdate = (oldEdge, newConnection) => {\n    console.log(oldEdge, newConnection);\n    \n    // setElements((els) => updateEdge(oldEdge, newConnection, els));\n  }\n  \n\n\n  return (\n    \n    <div className=\"dndflow\">\n      <Sidebar />\n      \n      <ReactFlowProvider>\n        <div className=\"reactflow-wrapper\" ref={reactFlowWrapper}>\n          <ReactFlow\n            elements={elements}\n            onConnect={onConnect}\n            onElementsRemove={onElementsRemove}\n            onElementClick={onElementClick}\n            onLoad={onLoad}\n            onDrop={onDrop}\n            onDragOver={onDragOver}\n            onEdgeUpdate={onEdgeUpdate}\n            style={{position: 'absolute', width:'80%'}}\n          >\n            <Controls />\n          </ReactFlow>\n        </div>\n        \n      </ReactFlowProvider>\n\n      <Drawer\n          title={`${widgetType} Widget`}\n          placement='right'\n          width={500}\n          closable={false}\n          onClose={onClose}\n          visible={visibleDrawer}\n          key={'right'}\n        >\n         \n          {widgets[widgetType]}\n          {/* {widgetType} */}\n        </Drawer>\n     \n    </div>\n   \n   \n  );\n};\n\nexport default ReactFlowChart;","import React from 'react';\nimport { WidgetsProvider } from './WidgetsContext';\nimport  ReactFlowChart from './ReactFlow';\nimport \"antd/dist/antd.css\";\nimport './dnd.css';\n\n\n\nconst App = () => {\n  \n \n\n\n  return (\n    <WidgetsProvider>\n      <ReactFlowChart />\n    </WidgetsProvider>\n   \n  );\n};\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}